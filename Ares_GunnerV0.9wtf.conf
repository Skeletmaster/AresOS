name: Ares_GunnerV0.9wtf
slots:
  databank:
    class: DataBank
    select: manual
  transponder:
    class: TransponderUnit
  weapon:
    class: WeaponUnit
    select: manual
  radar:
    class: RadarPVPUnit
    select: manual
  shieldGenerator:
    class: ShieldGeneratorUnit
  core:
    class: CoreUnit
handlers:
  unit:
    onStart:
      lua: |
        packagePrefix = "autoconf.custom.AresOS."
        package.preload[packagePrefix.."menuscreener"] = function()
           local self = {}
        self.viewTags = {"screen"}
        self.loadPrio = 100
        self.version = 0.9
        local Offset = 0
        local baseFly = nil
        local screener = nil
        local locked = false
        local auth = "AQN5B4-@7gSt1W?;"
        function self:valid(key)
            return true
        end
        local menupoint = "Main"
        local menus = {}
        local Buttons = {}
        function self:addMenu(name,func)
            menus[name] = func
        end
        local settingstab = "gunner"
        function self:onMouseDown(x,y,button)
            --print("track: "..x.."_"..y)
        end
        function self:onMouseUp(screen)
            local x = screen.mouseX * 100
            local y = screen.mouseY * 100
            for _, value in pairs(Buttons) do
                if (value.top <= y and y <= value.top + value.height and value.left <= x and x <= value.left + value.width) then
                    pcall(value.func)
                    break
                end
            end
        end
        
        function self:addButton(left,top,width,height,func)
            table.insert(Buttons,{
                ["top"] = top,
                ["left"] = left,
                ["width"] = width,
                ["height"] = height,
                ["func"] = func
            })
        end
        function self:addFancyButton(left,top,width,height,func,name,mx,my,c)
            self:addButton(left,top,width,height,func)
            local o = 0.2
            if (top <= my and my <= top +  height and  left <= mx and mx <=  left + width) then
                o = 0.5
            end
            c = c or "4682B4"
            local HTML = [[                        
                <rect x="]].. left ..[[%" y="]].. top ..[[%" rx="2" ry="2" width="]].. width ..[[%" height="]].. height ..[[%" style="fill:#]]..c..[[;fill-opacity:]]..o..[[" />
                <text x="]]..left + width * 0.1 ..[[%" y="]]..top + height * 0.7 ..[[%" style="fill:#FFFFFF;font-size:]]..height*1.5 ..[[">]]..name..[[</text>
            ]]
            return HTML
        end
        
        function self:register(env)
            _ENV = env
            if not self:valid(auth) then return end
            baseFly = getPlugin("baseflight",true)
            screener = getPlugin("screener",true)
            if screener == nil then return end
            screener:addScreen("centerfirst",{
                offsetx=0.3035,
                offsety=0.11,
                width=0.393,
                height=0.7,
                perspective="first",
                parent="mainScreenFirst"
            })
            screener:registerDefaultScreen("centerfirst","Menu")
        
            screener:addView("Menu",self)
        
            register:addAction("option6Start","Exit",function ()
                local mode = system.getCameraMode()
                if mode == 1 and not locked then
                    system.lockView(1)
                    locked = true
                    screener:freeMouse(true)
                else
                    system.lockView(0)
                    locked = false
                    screener:freeMouse(false)
                    if baseFly ~= nil then baseFly:setUpdateState(true) end
                end
            end)
            if player.getId() == 23833 then
                register:addAction("systemOnCameraChanged","ViewLocker", function (mode)
                    if mode == 1 then 
                        system.lockView(1)
                        locked = true
                        screener:freeMouse(true)
                    end
                end)
            end
            register:addAction("systemOnCameraChanged","ViewLockerStop", function (mode)
                if mode ~= 1 then
                    system.lockView(0)
                    locked = false
                    screener:freeMouse(false)
                    if baseFly ~= nil then baseFly:setUpdateState(true) end
                end
            end)
            self:addMenu("settings", function (mx,my,ms,mouseInWindow)
                self:addButton(3,10,20,3,function ()
                    settingstab = "gunner"
                    Offset = 0
                end)
                self:addButton(53,10,20,3,function ()
                    settingstab = "remote"
                    Offset = 0
                end)
                if mouseInWindow then
                    if baseFly ~= nil then baseFly:setUpdateState(false) end
                    Offset = Offset + system.getMouseWheel() * -1
                else
                    if baseFly ~= nil then baseFly:setUpdateState(true) end
                end
                if Offset < 0 then Offset = 0 end
                local HTML = ""
                if unitType == "gunner" then
                    local c1 = "4682B4"
                    local c2 = "4682B4"
                    if settingstab == "gunner" then c1 = "00ff00" else c2 = "00ff00" end
                    HTML = [[           
                    <rect x="2%" y="9%" rx="2" ry="2" width="96%" height="89%" style="fill:#4682B4;fill-opacity:0.35" />
        
                    <rect x="3%" y="10%" rx="2" ry="2" width="20%" height="3%" style="fill:#]]..c1..[[;fill-opacity:0.8" />
                    <text x="5%" y="12%" style="fill:#FFFFFF;font-size:6">Gunner</text>
        
                    <rect x="53%" y="10%" rx="2" ry="2" width="20%" height="3%" style="fill:#]]..c2..[[;fill-opacity:0.8" />
                    <text x="55%" y="12%" style="fill:#FFFFFF;font-size:6">Remote</text>
                    ]]
                end
                if unitType == settingstab then
                    HTML = HTML .. [[]]
                    local lines = {}
                    local set = getPlugin("settings")
                    for k,group in pairs(set.Description) do
                        table.insert(lines, {k,nil})
                        for name, des in pairs (group) do
                            table.insert(lines, {k,name})
                        end
                    end
                    local o = false
                    for i = 1, 80, 1 do
                        local c = i + Offset
                        local opacity = 0
                        o = not o
                        if o then opacity = 0.3 end
                        if lines[c] == nil then break end
                        local g = lines[c][1]
                        local n = lines[c][2]
                        local col = "4682B4"
                        if (i*3+13.2 <= my and my <= i*3+13 + 2.5 and  2.5 <= mx and mx <=  2.5 + 95) then
                            col = "244c9c"
                            opacity = 0.3
                        end
                        if n == nil then
                            HTML = HTML .. [[<rect x="2.5%" y="]]..i*3+13 ..[[%" rx="2" ry="2" width="95%" height="3%" style="fill:#]]..col..[[;fill-opacity:]]..opacity..[[" /><text x="5%" y="]]..i*3+15 ..[[%" style="fill:#FFFFFF;font-size:5">]]..g..[[</text>]]
                        else
                            HTML = HTML .. [[<rect x="2.5%" y="]]..i*3+13 ..[[%" rx="2" ry="2" width="95%" height="3%" style="fill:#]]..col..[[;fill-opacity:]]..opacity..[[" /><text x="5%" y="]]..i*3+15 ..[[%" style="fill:#FFFFFF;font-size:5">]]..n..[[</text><text x="60%" y="]]..i*3+15 ..[[%" style="fill:#FFFFFF;font-size:5">]]..set.Description[g][n]..[[</text>
                            <text x="25%" y="]]..i*3+15 ..[[%" style="fill:#FFFFFF;font-size:5">]]..tostring(set:get(n,g))..[[</text>
                            ]]
                            local r = set.Range[g][n]
                            if r[1] == "boolean" then
                                HTML = HTML .. [[<text x="30%" y="]]..i*3+15 ..[[%" style="fill:#FFFFFF;font-size:5">{]]..tostring(not set:get(n,g))..[[}</text>]]
                                self:addButton(30,i*3+13.2,5,2.5,function ()
                                    set:set(n,not set:get(n,g),g)
                                end)
                            elseif r[1] == "string" then
                                local x = 0
                                for _,v in pairs(r[2]) do
                                    HTML = HTML .. [[<text x="]].. 30+x ..[[%" y="]]..i*3+15 ..[[%" style="fill:#FFFFFF;font-size:5">{]]..v..[[}</text>]]
                                    self:addButton(30 + x,i*3+13.2,#v*1.5,2.5,function ()
                                        set:set(n,v,g)
                                    end)
                                    x = x + (#v+2)
                                end
                            
                            elseif r[1] == "number" then
                                local x = 0
                                HTML = HTML .. [[<text x="]].. 30+x ..[[%" y="]]..i*3+15 ..[[%" style="fill:#FFFFFF;font-size:5">{]]..r[2]..[[}</text>]]
                                self:addButton(29.25 + x,i*3+13.2,4.5,2.5,function ()
                                    set:set(n,r[2],g)
                                end)
                                x = x + 4
                                HTML = HTML .. [[<text x="]].. 30+x ..[[%" y="]]..i*3+15 ..[[%" style="fill:#FFFFFF;font-size:5">{-]]..r[4]..[[}</text>]]
                                self:addButton(29.25 + x,i*3+13.2,4.5,2.5,function ()
                                    set:set(n,set:get(n,g) - r[4],g)
                                end)
                                x = x + 4
                                HTML = HTML .. [[<text x="]].. 30+x ..[[%" y="]]..i*3+15 ..[[%" style="fill:#FFFFFF;font-size:5">{+]]..r[4]..[[}</text>]]
                                self:addButton(29.25 + x,i*3+13.2,4.5,2.5,function ()
                                    set:set(n,set:get(n,g) + r[4],g)
                                end)
                                x = x + 4
                                HTML = HTML .. [[<text x="]].. 30+x ..[[%" y="]]..i*3+15 ..[[%" style="fill:#FFFFFF;font-size:5">{]]..r[3]..[[}</text>]]
                                self:addButton(29.25 + x,i*3+13.2,4.5,2.5,function ()
                                    set:set(n,r[3],g)
                                end)
                            else
        
                            end
                        end
                    end
                end
                return HTML
            end)
            if unitType ~= "gunner" then
                self:addMenu("Commander", function (mx,my,ms,mouseInWindow)
                    if mouseInWindow and (9 <= my and my <= 98 and  2 <= mx and mx <=  68) then
                        if baseFly ~= nil then baseFly:setUpdateState(false) end
                        Offset = Offset + system.getMouseWheel() * -1
                    else
                        if baseFly ~= nil then baseFly:setUpdateState(true) end
                    end
                    return ""
                end)
                self:addMenu("Ship", function (mx,my,ms,mouseInWindow)
                    if mouseInWindow and (9 <= my and my <= 98 and  2 <= mx and mx <=  68) then
                        if baseFly ~= nil then baseFly:setUpdateState(false) end
                        Offset = Offset + system.getMouseWheel() * -1
                    else
                        if baseFly ~= nil then baseFly:setUpdateState(true) end
                    end
                    return ""
                end)
                self:addMenu("Main", function (mx,my,ms,mouseInWindow)
                    HTML = ""
                    self:addFancyButton(3,93,15,4,function ()
                        unit.exit()
                    end,"AllExit",mx,my)
                    HTML = HTML .. self:addFancyButton(35,93,15,4,function ()
                        unit.exit()
                    end,"RemoteExit",mx,my)
                    return HTML
                end)
            else
                self:addMenu("Pilot", function() return "" end)
            end
        end
        --viewObj, screen, realScreen.getMouseX(),realScreen.getMouseY(),realScreen.getMouseState() == 1,"real"..totalViewName
        function self:setScreen(screen)
            local mx = screen.mouseX
            local my = screen.mouseY
            local ms = screen.mouseDown
            local mouseInScreen = false
            local mouseInWindow = false
            mx = mx * 100
            my = my * 100
            if (0 <= my and my <= 100 and 0 <= mx and mx <= 100) then
                mouseInScreen = true
                if (9 <= my and my <= 98 and 2 <= mx and mx <= 98) then
                    mouseInWindow = true
                end
            end
            if system.isViewLocked() ~= 1 and unitType ~= "remote" then return "" end
            if not locked then return end
            Buttons = {}
            self:addButton(2,2,17.6,5,function ()
                menupoint = "Main"
            end)
            self:addButton(21.6,2,17.6,5,function ()
                menupoint = "Commander"
            end)
            self:addButton(41.2,2,17.6,5,function ()
                menupoint = "Ship"
            end)
            self:addButton(60.8,2,17.6,5,function ()
                menupoint = "Pilot"
            end)
            self:addButton(80.4,2,17.6,5,function ()
                menupoint = "settings"
                Offset = 0
            end)
            self:addButton(92.5,92.5,5,5,function ()
                system.lockView(0)
                locked = false
                screener:freeMouse(false)
                if baseFly ~= nil then baseFly:setUpdateState(true) end
            end)
            local HTML = ""
            if unitType == "gunner" then 
                HTML = [[        
                <svg style="width:100%;height:100%" viewBox="0 0 300 300">
                    <rect x="0%" y="0%" rx="2" ry="2" width="100%" height="100%" style="fill:#000000;fill-opacity:0.35" />
        
                    <rect x="2%" y="2%" rx="2" ry="2" width="17.6%" height="5%" style="fill:#4682B4;fill-opacity:0.8" />
                    <rect x="21.6%" y="2%" rx="2" ry="2" width="17.6%" height="5%" style="fill:#4682B4;fill-opacity:0.8" />
                    <rect x="41.2%" y="2%" rx="2" ry="2" width="17.6%" height="5%" style="fill:#4682B4;fill-opacity:0.8" />
                    <rect x="60.8%" y="2%" rx="2" ry="2" width="17.6%" height="5%" style="fill:#4682B4;fill-opacity:0.8" />
                    <rect x="80.4%" y="2%" rx="2" ry="2" width="17.6%" height="5%" style="fill:#4682B4;fill-opacity:0.8" />
        
                    <text x="8%" y="5.5%" style="fill:#FFFFFF;font-size:8">Main</text>
                    <text x="22%" y="5.5%" style="fill:#FFFFFF;font-size:8">Commander</text>
                    <text x="47%" y="5.5%" style="fill:#FFFFFF;font-size:8">Ship</text>
                    <text x="66.5%" y="5.5%" style="fill:#FFFFFF;font-size:8">Pilot</text>
                    <text x="83.8%" y="5.5%" style="fill:#FFFFFF;font-size:8">Settings</text>]]
            else
                HTML = [[        
                    <svg style="width:100%;height:100%" viewBox="0 0 300 300">]]
            end
            local s,svg,html = pcall(menus[menupoint],mx,my,ms,mouseInWindow)
            res = res or ""
            html = html or ""
            if s then
                HTML = HTML .. svg
                return HTML .. [[<text x="94%" y="97%" style="fill:#FFFFFF;font-size:14">X</text></svg>]] .. html
        
            else
                if devMode then
                    print(res)
                end
            end
        
            return HTML .. [[<text x="94%" y="97%" style="fill:#FFFFFF;font-size:14">X</text></svg>]]
        end
        return self
        
        end
        package.preload[packagePrefix.."menuGunner"] = function()
           local self = {}
        self.loadPrio = 100
        self.version = 0.9
        local auth = "AQN5B4-@7gSt1W?;"
        local Offset = 0
        function self:valid(key)
            if key ~= auth then return false end
            return unitType == "gunner"
        end
        
        function self:register(env)
            _ENV = env
        	if not self:valid(auth) then return end
            local mscreener = getPlugin("menuscreener",true,auth)
            if mscreener == nil then return end
            if core ~= nil then 
                local tanks = getTanks()
                self.SpaceTanks,self.RocketTanks = tanks.space,tanks.rocket
            end
            mscreener:addMenu("Main", function (mx,my,ms,mouseInWindow)
                HTML = [[
                <rect x="66%" y="9%" rx="2" ry="2" width="32%" height="20%" style="fill:#4682B4;fill-opacity:0.35" />
                <text x="70%" y="13%" style="fill:#FFFFFF;font-size:8">Destinations</text>]]
                HTML = HTML .. mscreener:addFancyButton(68,15,28,5,function ()
                    system.setWaypoint("::pos{0,0,-91264.7828,408204.8952,40057.4424}")
                end,"Base",mx,my)
                if transponder ~= nil then
                    HTML = HTML .. mscreener:addFancyButton(68,50,28,5,function ()
                            transponder.deactivate()
                            delay(transponder.activate,0.5)
                        end,"RestartTrans",mx,my)
                end
                HTML = HTML .. mscreener:addFancyButton(3,93,15,4,function ()
                    unit.exit()
                end,"AllExit",mx,my)
                HTML = HTML .. mscreener:addFancyButton(19,93,15,4,function ()
                    unit.exit()
                end,"GunnerExit",mx,my)
                return HTML
            end)
        
            mscreener:addMenu("Ship", function (mx,my,ms,mouseInWindow)
                HTML = [[
                    <rect x="2%" y="9%" rx="2" ry="2" width="56%" height="89%" style="fill:#4682B4;fill-opacity:0.35" />
                    <rect x="60%" y="9%" rx="2" ry="2" width="38%" height="49%" style="fill:#4682B4;fill-opacity:0.35" />
                    <rect x="60%" y="60%" rx="2" ry="2" width="38%" height="38%" style="fill:#4682B4;fill-opacity:0.35" />
        
                    <text x="6%" y="13%" style="fill:#FFFFFF;font-size:8">Elements</text>
                    <text x="64%" y="13%" style="fill:#FFFFFF;font-size:8">Tanks</text>
                    <text x="64%" y="64%" style="fill:#FFFFFF;font-size:8">Shield</text>]]
                if mouseInWindow and (9 <= my and my <= 98 and  2 <= mx and mx <=  68) then
                    if baseFly ~= nil then baseFly:setUpdateState(false) end
                    Offset = Offset + system.getMouseWheel() * -1
                else
                    if baseFly ~= nil then baseFly:setUpdateState(true) end
                end
                if core ~= nil then
                    local off = 0                
                    HTML = HTML .. [[<text x="64%" y="16%" style="fill:#FFFFFF;font-size:8">Space:</text>]]
                    for k,v in pairs(self.SpaceTanks) do
                        local fl = CalculateFuelLevel(v)*100
                        HTML = HTML .. [[
                            <text x="64%" y="]].. 19+off ..[[%" style="fill:#FFFFFF;font-size:8">]] .. v[1] .. [[</text>
                            <text x="75%" y="]].. 19+off ..[[%" style="fill:#FFFFFF;font-size:8">]].. round(fl,2) ..[[</text>
                        ]]
                        off = off + 3
                    end
                    off = off + 3
                    HTML = HTML .. [[<text x="64%" y="]].. 19+off ..[[%" style="fill:#FFFFFF;font-size:8">Rocket:</text>]]
                    for k,v in pairs(self.RocketTanks) do
                        local fl = CalculateFuelLevel(v)*100
                        HTML = HTML .. [[
                            <text x="64%" y="]].. 19+off ..[[%" style="fill:#FFFFFF;font-size:8">]] .. v[1] .. [[</text>
                            <text x="75%" y="]].. 19+off ..[[%" style="fill:#FFFFFF;font-size:8">]].. round(fl,2) ..[[</text>
                        ]]
                        off = off + 3
                    end
                    local elementHp = 0
                    local elementHpMax = 0
                    local elementDmg = {}
                    for _, id in pairs(core.getElementIdList()) do
                        local hp = core.getElementHitPointsById(id)
                        local hpmax = core.getElementMaxHitPointsById(id)
                        elementHp = elementHp + hp
                        elementHpMax = elementHpMax + hpmax
                        if hp ~= hpmax then table.insert(elementDmg,id) end
                    end
                    HTML = HTML .. [[
                            <text x="6%" y="]].. 19 ..[[%" style="fill:#FFFFFF;font-size:8">ElementHP:</text>
                            <text x="30%" y="]].. 19 ..[[%" style="fill:#FFFFFF;font-size:8">]].. round(elementHp) .. "/" .. round(elementHpMax) ..[[</text>]]
                    HTML = HTML .. [[
                        <text x="6%" y="]].. 22 ..[[%" style="fill:#FFFFFF;font-size:8">CoreStress:</text>
                        <text x="30%" y="]].. 22 ..[[%" style="fill:#FFFFFF;font-size:8">]].. round(core.getCoreStress()) .. "/" .. round(core.getMaxCoreStress()) ..[[</text>]]
                    off = 28
                    for i = 1, 20, 1 do
                        local id = elementDmg[i+Offset]
                        if id == nil then break end
                        HTML = HTML .. [[
                            <text x="6%" y="]].. off ..[[%" style="fill:#FFFFFF;font-size:8">]] .. core.getElementDisplayNameById(id) .. [[</text>
                            <text x="30%" y="]].. off ..[[%" style="fill:#FFFFFF;font-size:8">]]..  round(core.getElementHitPointsById(id)/core.getElementMaxHitPointsById(id)*100,2) ..[[</text>
                        ]]
                        off = off + 3
                    end     
                end
                if shield ~= nil then
                    HTML = HTML .. [[
                        <text x="64%" y="67%" style="fill:#FFFFFF;font-size:5">State</text>
                        <text x="64%" y="70%" style="fill:#FFFFFF;font-size:5">HP</text>
                        <text x="64%" y="73%" style="fill:#FFFFFF;font-size:5">venting</text>
                        <text x="64%" y="76%" style="fill:#FFFFFF;font-size:5">VentingCd</text>
                        <text x="64%" y="79%" style="fill:#FFFFFF;font-size:5">Resistances</text>
                        <text x="64%" y="82%" style="fill:#FFFFFF;font-size:5">ResCd</text>
                        <text x="64%" y="85%" style="fill:#FFFFFF;font-size:5">ResPool</text>
                        <text x="64%" y="88%" style="fill:#FFFFFF;font-size:5">StressRatio</text>
                        <text x="64%" y="91%" style="fill:#FFFFFF;font-size:5">StressHp</text>
                        <text x="64%" y="94%" style="fill:#FFFFFF;font-size:5"></text>
                        <text x="64%" y="97%" style="fill:#FFFFFF;font-size:5"></text>
        
                        <text x="75%" y="67%" style="fill:#FFFFFF;font-size:5">]] .. shield.isActive() .. [[</text>
                        <text x="75%" y="70%" style="fill:#FFFFFF;font-size:5">]] .. round(shield.getShieldHitpoints()) .. "  /  " .. shield.getMaxShieldHitpoints()  .. [[</text>
                        <text x="75%" y="73%" style="fill:#FFFFFF;font-size:5">]] .. shield.isVenting() .. [[</text>
                        <text x="75%" y="76%" style="fill:#FFFFFF;font-size:5">]] .. round(shield.getVentingCooldown()).. "  /  " .. shield.getVentingMaxCooldown() .. [[</text>
                        <text x="75%" y="79%" style="fill:#FFFFFF;font-size:5">]] .. shield.getResistances()[1].." ".. shield.getResistances()[2] .." ".. shield.getResistances()[3].." ".. shield.getResistances()[4] .. [[</text>
                        <text x="75%" y="82%" style="fill:#FFFFFF;font-size:5">]] .. shield.getResistancesCooldown() .. "  /  " .. shield.getResistancesMaxCooldown() .. [[</text>
                        <text x="75%" y="85%" style="fill:#FFFFFF;font-size:5">]] .. shield.getResistancesRemaining() .. "  /  " .. shield.getResistancesPool() .. [[</text>
                        <text x="75%" y="88%" style="fill:#FFFFFF;font-size:5">]] .. round(shield.getStressRatioRaw()[1],2).." "..  round(shield.getStressRatioRaw()[2],2) .." "..  round(shield.getStressRatioRaw()[3],2).." "..  round(shield.getStressRatioRaw()[4],2) .. [[</text>
                        <text x="75%" y="91%" style="fill:#FFFFFF;font-size:5">]] .. shield.getStressHitpointsRaw() .. [[</text>]]
        
                    local c = "FF0000"
                    if shield.isActive() == 1 then c = "00FF00" end
                    HTML = HTML .. mscreener:addFancyButton(62,93,25,4,function ()
                        shield.activate()
                    end,"activate Shield",mx,my,c)
                end
                return HTML
            end)
        end
        function CalculateFuelLevel(id)
            return (core.getElementMassById(id[1]) - id["me"]) / id["mv"]
        end
        function getTanks()
        	local atmos, space, rocket  = {}, {}, {}
            local ids = core.getElementIdList()
        	fuelTankHandlingAtmos = fuelTankHandlingAtmos or 0
        	fuelTankHandlingSpace = fuelTankHandlingSpace or 0
        	fuelTankHandlingRocket = fuelTankHandlingRocket or 0
        	
        	ContainerOptimization = ContainerOptimization or 0
        	FuelTankOptimization = FuelTankOptimization or 0	
            local function CalcMaxVol(mv)
                local f1, f2 = 0, 0
        
                if ContainerOptimization > 0 then 
                    f1 = ContainerOptimization * 0.05
                end
                if FuelTankOptimization > 0 then 
                    f2 = FuelTankOptimization * 0.05
                end
                return mv * (1 - (f1 + f2))        
            end
        	local tanks = {atmo = {},space ={} ,rocket = {}}
        	local slots = getPlugin("slots")
        	for _,id in pairs(ids) do
        		local type = core.getElementClassById(id)
        		local typeTranslate = slots:getClassType(type)
        		if typeTranslate ~= nil then
        			if typeTranslate == "atmofueltank" or typeTranslate == "spacefueltank" or typeTranslate == "rocketfueltank" then
        				local hp = core.getElementMaxHitPointsById(id)
        				local handling = 0
        				if typeTranslate == "atmofueltank" then
        					handling = fuelTankHandlingAtmos
        				elseif typeTranslate == "spacefueltank" then
        					handling = fuelTankHandlingSpace
        				elseif typeTranslate == "rocketfueltank" then
        					handling = fuelTankHandlingRocket
        				end
        				local MaxVolume, massEmpty = tankStatsDefault(typeTranslate,hp,handling)
        				local hasLink = false
        				hasLink,MaxVolume,massEmpty = tankStats(id,typeTranslate,MaxVolume,massEmpty)
        				if not hasLink then
        					MaxVolume = MaxVolume + (MaxVolume * (handling * 0.2))
        					MaxVolume = CalcMaxVol(MaxVolume)
        				end
        				
        				local list = {[1] = id,["mv"] = MaxVolume,["me"] = massEmpty}
        				if typeTranslate == "atmofueltank" then
        					table.insert(tanks.atmo, list)
        				elseif typeTranslate == "spacefueltank" then
        					table.insert(tanks.space, list)
        				elseif typeTranslate == "rocketfueltank" then
        					table.insert(tanks.rocket, list)
        				end
        			end
        		end
        	end
        	for _,typelist in pairs(tanks) do
        		table.sort(typelist, function(a,b) return a[1] < b[1] end)
        	end
        	
            return tanks
        end
        local tankDefinitions = {
        	atmofueltank={
        		{w=10000,mv=51200,me=5480}, -- volume in kg of L
        		{w=1300,mv=6400,me=988.67}, -- volume in kg of M
        		{w=150,mv=1600,me=182.67},  -- volume in kg of S
        		{w=0,mv=400,me=35.03}		-- volume in kg of XS
        	},
        	spacefueltank={
        		{w=10000,mv=76800,me=5480}, -- volume in kg of L
        		{w=1300,mv=9600,me=988.67}, -- volume in kg of M
        		{w=150,mv=2400,me=182.67},  -- volume in kg of S
        		{w=0,mv=2400,me=182.67}		-- volume in kg of XS
        	},
        	rocketfueltank={
        		{w=65000,mv=50000 * 0.8,me=25740},	-- volume in kg of L
        		{w=1300,mv=6400 * 0.8,me=4720}, 	-- volume in kg of M
        		{w=150,mv=800 * 0.8,me=886.72},		-- volume in kg of S
        		{w=0,mv=400 * 0.8,me=173.42}		-- volume in kg of XS
        	}
        }
        function tankStatsDefault(typeName, hp)
        	for _,stats in pairs(tankDefinitions[typeName]) do
        		if hp > stats.w then
        			return stats.mv,stats.me
        		end
        	end
        	return 0,0
        end
        function tankStats(id,listName,MaxVolume,massEmpty)
        	local hasLink = false
        	
        	for _,tank in pairs(_ENV[listName]) do
        		if tank.getLocalId() == id then
        			hasLink = true
        			MaxVolume = tank.getMaxVolume() * 4
        			massEmpty = tank.getSelfMass()
        			break
        		end
        	end
        	return hasLink,MaxVolume,massEmpty
        end
        return self
        
        end
        package.preload[packagePrefix.."combatscreen"] = function()
           local self = {}
        self.version = 0.9
        self.loadPrio = 1000
        self.viewTags = {"screen"}
        local auth = "AQN5B4-@7gSt1W?;"
        function self:valid(key)
            if key ~= auth then return false end
            return unitType == "gunner"
        end
        local tostring,tonumber = tostring,tonumber
        local radar = radar[1]
        local ownData,otherData,shipData,weaponHits,weaponMisses,log = {data = {kills = {},id = player.getId(), name = player.getName()}, ships = {}},{},{},{},{},{}
        local SelTarget = 0
        local rMode = true
        local show = {
            Dead = true,
            [4] = true,
            [6] = true,
            [7] = true,
            [5] = true,
            XL = true,
            L = true,
            M = true,
            S = true,
            XS = true
        }
        local baseFly,RW,GH,sn
        local noData = 1
        local Offset = 0
        local slave = false
        local Com = ""
        local function getData()
        
        end
        function self:register(env)
            _ENV = env
        	if not self:valid(auth) then return end
            baseFly = getPlugin("baseflight",true)
            RW = getPlugin("radarwidget",true,auth)
            GH = getPlugin("gunnerhud",true,auth)
            sn = getPlugin("shortname",true,auth)
            RW:AddRadarMode("Automatic",function (Data)
                local primary = 0
                if database.hasKey ~= nil then
                    if database.hasKey("Primary") == 1 then 
                        primary = database.getIntValue("Primary")
                        RW:AddShip(primary, Data, "primary - ",1)
                    end
                end
                if SelTarget ~= 0 then
                    RW:AddShip(SelTarget, Data, "selected - ",2)
                end
                for _,id in pairs(radar.getIdentifiedConstructIds()) do
                    if id == primary or id == SelTarget then goto skip end
                    RW:AddShip(id, Data, "")
                    ::skip::
                end
            end)
            local cmd = getPlugin("commandhandler")
            cmd:AddCommand("t",function(input)
                if RW.SpecialRadarMode == "Automatic" then
                    SelTarget = sn:getId(string.upper(input[2]))
                else
                    RW.tosearch = string.upper(input[2])
                    RW.SpecialRadarMode = "Search"
                end
            end,"show the target: /t TW4")
            cmd:AddCommand("reset",function(input)
                for _, id in pairs(database.getKeyList()) do
                    if type(id) == "number" then
                        database.clearValue(id)
                    end
                end
                for _,key in pairs(database.getKeyList()) do
                    if string.sub(key,0,3) == "dmg" then
                        database.clearValue(key)
                    end
                end
                ownData= {data = {kills = {},id = player.getId(), name = player.getName()}, ships = {}}
            end,"resets constructData")
        
        
            register:addAction("OnHit", "combatData", function (id,d,w)
                if weaponHits[w.getLocalId()] == nil then weaponHits[w.getLocalId()] = 0 end
                weaponHits[w.getLocalId()] = weaponHits[w.getLocalId()] + 1
                
                table.insert(log, "Hit: "  .. round(d))
        
                id = tostring(id)
                if ownData.ships[id] == nil then ownData.ships[id] = {} end
                if ownData.ships[id].dmg == nil then ownData.ships[id].dmg = 0 end
                if ownData.ships[id].edes == nil then ownData.ships[id].edes = {} end
        
                ownData.ships[id].dmg = ownData.ships[id].dmg + math.floor(d)
                ownData.ships[id].lhit = math.floor(system.getUtcTime())
            end)
        
            register:addAction("OnElementDestroyed", "combatData", function (id,itemId,w)
                table.insert(log, "E: " .. string.sub(system.getItem(itemId).displayNameWithSize,0,20))
        
                id = tostring(id)
        
                if ownData.ships[id] == nil then ownData.ships[id] = {} end
                if ownData.ships[id].dmg == nil then ownData.ships[id].dmg = 0 end
                if ownData.ships[id].edes == nil then ownData.ships[id].edes = {} end
                table.insert(ownData.ships[id].edes, itemId)
        
            end)
        
            register:addAction("OnDestroyed", "combatData", function (id,w)
                table.insert(ownData.data.kills, id)
                table.insert(log, "Killed: " .. tostring(sn:getShortName(id)))
            end)
        
            register:addAction("OnMissed", "combatData", function (id,w)
                if weaponMisses[w.getLocalId()] == nil then weaponMisses[w.getLocalId()] = 0 end
                weaponMisses[w.getLocalId()] = weaponMisses[w.getLocalId()] + 1
        
                table.insert(log, "Missed: " .. tostring(sn:getShortName(id)))
        
                id = tostring(id)
                if ownData.ships[id] == nil then ownData.ships[id] = {} end
                if ownData.ships[id].dmg == nil then ownData.ships[id].dmg = 0 end
                if ownData.ships[id].edes == nil then ownData.ships[id].edes = {} end
        
                ownData.ships[id].lhit = math.floor(system.getUtcTime())
            end)
            register:addAction("unitOnStop","DataPrint", function ()
                print(json.encode({ownData = ownData, shipData = shipData}))
            end)
            local screener = getPlugin("screener",true)
            if screener ~= nil then
                screener:addScreen("screen1third",{
                    offsetx=0.01,
                    offsety=0.03,
                    width=0.2,
                    height=0.25,
                    perspective="third",
                    parent="mainScreenThird"
                })
                screener:registerDefaultScreen("screen1third","combatData")
        
                screener:addView("combatData",self)
            end
        
            addTimer("dmgtoDB",1,function ()
                ownData.data.t = system.getArkTime()
                database.setStringValue("dmg"..unit.getLocalId(),json.encode(ownData))
            end)
            local function getotherData()
                for _, id in pairs(radar.getIdentifiedConstructIds()) do
                    local owner = ""
                    if radar.hasMatchingTransponder(id) == 1 then
                        local i = radar.getConstructOwnerEntity(id)
                        if i.isOrganization then
                            owner = system.getOrganization(i.id).name
                        else
                            owner = system.getPlayerName(i.id)
                        end
                    end
                    database.setStringValue(id,json.encode({d = radar.getConstructInfos(id),m = math.floor(radar.getConstructMass(id)),n = radar.getConstructName(id),s = radar.getConstructCoreSize(id),k = radar.getConstructKind(id), o = owner, h = radar.hasMatchingTransponder(id), a = (radar.isConstructAbandoned(id) == 1), t = math.floor(system.getArkTime())}))
                    shipData[id] = {d = radar.getConstructInfos(id),m = math.floor(radar.getConstructMass(id)),n = radar.getConstructName(id),s = radar.getConstructCoreSize(id),k = radar.getConstructKind(id), o = owner, h = radar.hasMatchingTransponder(id), a = (radar.isConstructAbandoned(id) == 1), t = math.floor(system.getArkTime())}
                end
        
                for _,db in pairs(databases) do
                    for _,key in pairs(db.getKeyList()) do
                        local oId = string.sub(key,4,#key)
                        if string.sub(key,0,3) == "dmg" and oId ~= tostring(unit.getLocalId()) then
                            local list = json.decode(db.getStringValue(key))
                            if system.getArkTime()-list.data.t > 3600 then
                                db.clearValue(key)
                            else
                                otherData[oId] = list
                            end
                            coroutine.yield()
                        end
                    end
                end
                local x = 0
                for _,db in pairs(databases) do
                    x = x + 1
                    if x%10 == 0 then coroutine.yield() end
                    for _, id in pairs(db.getKeyList()) do
                        id = tonumber(id)
                        if id ~= nil then
                            if radar.isConstructIdentified(id) == 0 then
                                local tab = json.decode(db.getStringValue(id))
                                if system.getArkTime() - tab.t > 60 then
                                    db.clearValue(id)
                                else
                                    shipData[id] = tab
                                end
                            end
                        end
                    end
                end
            end
            local corouData
            delay(function ()
                corouData = coroutine.create(getotherData)
            end, 0.2)
            local y  = 0
            register:addAction("systemOnUpdate","combatData",function ()
                y = y + 1
                if y%3 == 0 then
                    if corouData == nil then return end
                    if coroutine.status(corouData) == "dead" then corouData = coroutine.create(getotherData) else coroutine.resume(corouData) end
                end
            end)
            if database.hasKey("dmg"..unit.getLocalId()) == 1 then
                ownData = json.decode(database.getStringValue("dmg"..unit.getLocalId()))
        
                if system.getArkTime()-ownData.data.t > 3600 then
                    ownData = {data = {kills = {}}, ships = {}}
                end
                ownData.data.id = player.getId()
                ownData.data.name = player.getName()
            end
            local mscreener = getPlugin("menuscreener",true,auth)
            if mscreener ~= nil then
                mscreener:addMenu("Commander", function (mx,my,ms,mouseInWindow)
                    local primary = "none"
                    if database.hasKey ~= nil then
                        if database.hasKey("Primary") == 1 then 
                            primary = database.getIntValue("Primary")
                            primary = tostring(sn:getShortName(primary))
                        end
                    end 
                    local function addShip(y,id,ID,name,Size,Type,MaxV,Dmg,lHit,o)
                        mscreener:addButton(2.5,y-1.75,60,2.5,function ()
                            SelTarget = id
                            if not slave then
                                RW.tosearch = string.upper(ID)
                                RW.SpecialRadarMode = "Search"
                            end
                        end)
        
                        local lookup = {"Uni","Pla","Ast","Sta","Dyn","Spa","Ali"}
                        local c = "4682B4"
                        local opacity = 0
                        if o then opacity = 0.35 end
                        if (y-1.75 <= my and my <= y-1.75 + 2.5 and  2.5 <= mx and mx <=  2.5 + 65) then
                            c = "244c9c"
                            opacity = 0.35
                        end
                        MaxV = MaxV or "plsIdent"
                        local HTML =  [[<rect x="2.5%" y="]]..y-1.75 ..[[%" rx="2" ry="2" width="65%" height="2.5%" style="fill:#]]..c..[[;fill-opacity:]]..opacity..[[" /><text x="3%" y="]]..y..[[%" style="fill:#FFFFFF;font-size:5">]]..ID..[[</text>
                        <text x="7.8%" y="]]..y..[[%" style="fill:#FFFFFF;font-size:5">]]..name..[[</text>
                        <text x="28%" y="]]..y..[[%" style="fill:#FFFFFF;font-size:5">]]..Size..[[</text>
                        <text x="33%" y="]]..y..[[%" style="fill:#FFFFFF;font-size:5">]]..lookup[Type]..[[</text>
                        <text x="39%" y="]]..y..[[%" style="fill:#FFFFFF;font-size:5">]]..MaxV..[[</text>
                        <text x="47%" y="]]..y..[[%" style="fill:#FFFFFF;font-size:5">]]..Dmg..[[</text>
                        <text x="57%" y="]]..y..[[%" style="fill:#FFFFFF;font-size:5">T - ]]..lHit..[[ s</text>
                        ]]
                        if Com == "You" then
                            mscreener:addButton(65,y-1.75,2.5,2.5,function ()
                                if database.hasKey ~= nil then
                                    for _,db in pairs(databases) do
                                        db.setIntValue("Primary", id)
                                    end
                                end
                            end)
                            local c = "00FF00"
                            if id == SelTarget then
                                c = "FFFF00"
                            elseif primary == ID then
                                c = "FF0000" 
                            end
                            HTML = HTML .. [[<rect x="65%" y="]]..y-1.75 ..[[%" rx="2" ry="2" width="2.5%" height="2.5%" style="fill:#]]..c ..[[;fill-opacity:0.2" />]]
                        end
                        return HTML
                    end
                    if mouseInWindow and (9 <= my and my <= 98 and  2 <= mx and mx <=  68) then
                        if baseFly ~= nil then baseFly:setUpdateState(false) end
                        Offset = Offset + system.getMouseWheel() * -1
                    else
                        if baseFly ~= nil then baseFly:setUpdateState(true) end
                    end
                    if Offset < 0 then Offset = 0 end
                    local dps = 0
                    local dmgs = {}
                    for _,d in pairs(ownData.ships) do
                        dps = dps + d.dmg
                    end
                    for k,tab in pairs(otherData) do
                        local key = tab.data.name
                        dmgs[key] = 0
                        for _,d in pairs(tab.ships) do
                            dmgs[key] = dmgs[key] + d.dmg
                        end
                        --ToDo lHit
                    end
                    for id in pairs(shipData) do
                        local ID = tostring(id)
                        if ownData.ships[ID] ~= nil and ownData.ships[ID].lhit ~= nil then
                            shipData[id].lhit = ownData.ships[ID].lhit
                        end
                        for key, tab in pairs(otherData) do
                            if tab.ships[ID] ~= nil and tab.ships[ID].lhit ~= nil then
                                if shipData[id].lhit < tab.ships[ID].lhit then
                                    shipData[id].lhit = tab.ships[ID].lhit 
                                end
                            end
                        end
                    end
                    HTML = [[
                    <rect x="2%" y="9%" rx="2" ry="2" width="66%" height="89%" style="fill:#4682B4;fill-opacity:0.35" />
                    <rect x="70%" y="9%" rx="2" ry="2" width="28%" height="20%" style="fill:#4682B4;fill-opacity:0.35" />
                    <rect x="70%" y="31%" rx="2" ry="2" width="28%" height="47%" style="fill:#4682B4;fill-opacity:0.35" />
                    <rect x="70%" y="80%" rx="2" ry="2" width="28%" height="18%" style="fill:#4682B4;fill-opacity:0.35" />
        
                    <text x="4%" y="17%" style="fill:#FFFFFF;font-size:5">ID</text>
                    <text x="8%" y="17%" style="fill:#FFFFFF;font-size:5">Name</text>
                    <text x="28%" y="17%" style="fill:#FFFFFF;font-size:5">Size</text>
                    <text x="33%" y="17%" style="fill:#FFFFFF;font-size:5">Type</text>
                    <text x="39%" y="17%" style="fill:#FFFFFF;font-size:5">MaxV</text>
                    <text x="47%" y="17%" style="fill:#FFFFFF;font-size:5">TotalDmg</text>
                    <text x="57%" y="17%" style="fill:#FFFFFF;font-size:5">lastHit</text>
        
                    <line x1="10" y1="52" x2="200" y2="52" style="stroke:#FFFFFF;stroke-width:0.5" />
                    
                    <line x1="23" y1="48" x2="23" y2="290" style="stroke:#FFFFFF;stroke-width:0.5" />
                    <line x1="82" y1="48" x2="82" y2="290" style="stroke:#FFFFFF;stroke-width:0.5" />
                    <line x1="97" y1="48" x2="97" y2="290" style="stroke:#FFFFFF;stroke-width:0.5" />
                    <line x1="115" y1="48" x2="115" y2="290" style="stroke:#FFFFFF;stroke-width:0.5" />
                    <line x1="139" y1="48" x2="139" y2="290" style="stroke:#FFFFFF;stroke-width:0.5" />
                    <line x1="169" y1="48" x2="169" y2="290" style="stroke:#FFFFFF;stroke-width:0.5" />
                    
                    <text x="72%" y="12%" style="fill:#FFFFFF;font-size:7">DamageDealt:</text>
                    <text x="72%" y="15%" style="fill:#FFFFFF;font-size:5">You:</text>  <text x="85%" y="15%" style="fill:#FFFFFF;font-size:5">]]..round(dps)..[[</text>
        
                    <text x="72%" y="34%" style="fill:#FFFFFF;font-size:7">TargetInfos:</text>]]
                    local y = 18
                    for k, d in pairs(dmgs) do
                        HTML = HTML .. [[<text x="72%" y="]] .. y .. [[%" style="fill:#FFFFFF;font-size:5">]].. k ..[[</text>  <text x="85%" y="]] .. y .. [[%" style="fill:#FFFFFF;font-size:5">]]..round(d)..[[</text>]]
                        y = y + 3
                    end
                    Com = ""
                    if database.hasKey ~= nil then
                        if database.hasKey("Com") == 1 then
                            Com = database.getStringValue("Com")
                            if Com == player.getName() then
                                Com = "You"
                            end
                        end
                    end
                    HTML = HTML .. mscreener:addFancyButton(71,81,26,3,function ()
                        if database.hasKey == nil then return end
                        for _,db in pairs(databases) do
                            if Com == "You" then
                                db.clearValue("Com")
                            else
                                db.setStringValue("Com",player.getName())
                            end
                        end
                    end,"Commander:    " .. Com,mx,my)
                    HTML = HTML .. [[<text x="72%" y="90%" style="fill:#FFFFFF;font-size:7">Primary:</text> <text x="85%" y="90%" style="fill:#FFFF00;font-size:10">]]..primary..[[</text>]]
                    slave = RW.SpecialRadarMode == "Automatic"
                    HTML = HTML .. mscreener:addFancyButton(71,94,10,3,function ()
                        slave = not slave
                        if slave then RW.SpecialRadarMode = "Automatic" else RW.SpecialRadarMode = nil end
                    end,"Slave:  " .. tostring(slave),mx,my)
        
                    if SelTarget == 0 or shipData[SelTarget] == nil then
                        HTML = HTML .. [[<text x="72%" y="37%" style="fill:#FFFFFF;font-size:5">NoTargetSelected</text>]]
                    else
                        local data = shipData[SelTarget]
                        HTML = HTML .. [[
                            <text x="72%" y="37%" style="fill:#FFFFFF;font-size:5">Weapon:</text>
                            <text x="72%" y="40%" style="fill:#FFFFFF;font-size:5">Radar:</text>
                            <text x="72%" y="43%" style="fill:#FFFFFF;font-size:5">antiGravity:</text>
                            <text x="72%" y="46%" style="fill:#FFFFFF;font-size:5">atmoEngines:</text>
                            <text x="72%" y="49%" style="fill:#FFFFFF;font-size:5">spaceEngines:</text>
                            <text x="72%" y="52%" style="fill:#FFFFFF;font-size:5">rocketEngines:</text>
                            <text x="72%" y="55%" style="fill:#FFFFFF;font-size:5">Mass:</text>
        
                            <text x="85%" y="37%" style="fill:#FFFFFF;font-size:5">]]..tostring(data.d.weapons)..[[</text>
                            <text x="85%" y="40%" style="fill:#FFFFFF;font-size:5">]]..tostring(data.d.radars)..[[</text>
                            <text x="85%" y="43%" style="fill:#FFFFFF;font-size:5">]]..tostring(data.d.antiGravity)..[[</text>
                            <text x="85%" y="46%" style="fill:#FFFFFF;font-size:5">]]..tostring(data.d.atmoEngines)..[[</text>
                            <text x="85%" y="49%" style="fill:#FFFFFF;font-size:5">]]..tostring(data.d.spaceEngines)..[[</text>
                            <text x="85%" y="52%" style="fill:#FFFFFF;font-size:5">]]..tostring(data.d.rocketEngines)..[[</text>
                            <text x="85%" y="55%" style="fill:#FFFFFF;font-size:5">]]..round(data.m)..[[</text>]]
                        if data.h == 1 then
                            HTML = HTML .. [[
                                <text x="72%" y="61%" style="fill:#FFFFFF;font-size:5">Owner:</text>
                                <text x="80%" y="61%" style="fill:#FFFFFF;font-size:5">]]..data.o..[[</text>
                            ]]
                        end
                        local ID = tostring(SelTarget)
                        if SelTarget > 1 and ownData.ships[ID] ~= nil then
                            local sd = ownData.ships[ID].dmg
                            local se = #ownData.ships[ID].edes
                            for _,tab in pairs(otherData) do
                                if  tab.ships[ID] ~= nil then
                                    sd = sd + tab.ships[ID].dmg
                                    se = se + #tab.ships[ID].edes
                                end
                            end
                            HTML = HTML .. [[                    
                                <text x="72%" y="58%" style="fill:#FFFFFF;font-size:5">Dmg:</text>
                                <text x="72%" y="61%" style="fill:#FFFFFF;font-size:5">EDes:</text>
                                <text x="85%" y="58%" style="fill:#FFFFFF;font-size:5">]]..sd..[[</text>
                                <text x="85%" y="61%" style="fill:#FFFFFF;font-size:5">]]..se..[[</text>]]
                        end
                    end
                    --{[float] weapons, [float] radars, [float] antiGravity, [float] atmoEngines, [float] spaceEngines, [float] rocketEngines} 
                    local n = "ShowHostile"
                    if rMode then n = "ShowFriendly" end
                    HTML = HTML .. mscreener:addFancyButton(4,10,15,3,function ()
                        rMode = not rMode
                    end,n,mx,my)
        
                    if noData == 1 then n = "All" elseif noData == 2 then n = "OnlyNoData"  else n = "OnlyData"  end
                    HTML = HTML .. mscreener:addFancyButton(20,10,15,3,function ()
                        noData = noData + 1
                        if noData > 3 then noData = 1 end
                    end,n,mx,my)
                    local function addToggle(x,y,k,mx,my)
                        local lookup = {"Uni","Pla","Ast","Sta","Dyn","Spa","Ali"}
                        local n = k
                        if type(n) == "number" then n = lookup[n] end
                        local c = "FF0000"
                        if show[k] then c = "00FF00" end
                        return mscreener:addFancyButton(x,y,4,2,function ()
                            show[k] = not show[k]
                        end,n,mx,my,c)
                    end
                    HTML = HTML .. addToggle(40,10,"Dead",mx,my)
                    HTML = HTML .. addToggle(45,10,4,mx,my)
                    HTML = HTML .. addToggle(50,10,6,mx,my)
                    HTML = HTML .. addToggle(55,10,7,mx,my)
                    HTML = HTML .. addToggle(60,10,5,mx,my)
        
                    HTML = HTML .. addToggle(40,13,"XL",mx,my)
                    HTML = HTML .. addToggle(45,13,"L",mx,my)
                    HTML = HTML .. addToggle(50,13,"M",mx,my)
                    HTML = HTML .. addToggle(55,13,"S",mx,my)
                    HTML = HTML .. addToggle(60,13,"XS",mx,my)
        
                    local y = 20
                    local o = true
                    --crawler
                    local Hostile = 1
                    if rMode then Hostile = 0 end
                    local constructs = {}
                    local constructData = radar.getConstructIds()
                    if noData == 3 then
                        constructData = shipData
                    end
                    for ID, id in pairs(constructData) do
                        if noData == 3 then
                            id = ID
                        end
                        if shipData[id] == nil then
                            if Hostile ~= radar.hasMatchingTransponder(id) then goto skip end
                            if not show["Dead"] and radar.isConstructAbandoned(id) == 1 then goto skip end
                            if not show[radar.getConstructKind(id)] then goto skip end
                            if not show[radar.getConstructCoreSize(id)] then  goto skip end
                        else
                            if Hostile ~= shipData[id].h then goto skip end
                            if not show["Dead"] and shipData[id].a then goto skip end
                            if not show[shipData[id].k] then goto skip end
                            if not show[shipData[id].s] then  goto skip end
                            if noData == 2 then goto skip end
                        end
                        table.insert(constructs,id)
                        ::skip::
                    end
                    --drawer
                    local time = system.getUtcTime()
                    for i = 1, 109, 1 do
                        local id = constructs[i+Offset]
                        if id == nil then Offset = Offset -1 break end
                        local lhit =  time
                        local d = 0 
                        local mv
                        if shipData[id] ~= nil then
                            mv = round(GH:MasstoMaxV(shipData[id].m)*3.6)
                            if shipData[id].k ~= 5 then mv = "static" end
                            lhit = shipData[id].lhit or time
                            local ID = tostring(id)
                            if ownData.ships[ID] ~= nil and  ownData.ships[ID].dmg ~= nil then
                                d = ownData.ships[ID].dmg
                            end
                        end
                        if shipData[id] == nil then
                            HTML = HTML .. addShip(y,id,tostring(sn:getShortName(id)),string.sub(radar.getConstructName(id),0,19),radar.getConstructCoreSize(id),radar.getConstructKind(id),mv,0,tostring(round(time - lhit)),o)
                        else
                            HTML = HTML .. addShip(y,id,tostring(sn:getShortName(tonumber(id))),string.sub(shipData[id].n,0,19),shipData[id].s,shipData[id].k,mv,round(d),tostring(round(time - lhit)),o)
                        end
                        o = not o
                        y = y + 2.5
                        if y > 97 then break end
                    end
                    --HTML = HTML .. addShip(y,3213212,"DAW","LEGION Hunter","XL",5,52121,1424555,"5 min",o)
                    --HTML = HTML .. addShip(y+2.5,3213212,"DAW","LEGION Hunter","XL",5,52121,1424555,"5 min",not o)
        
                    return HTML
                end)
            end
        end
        
        function self:setScreen()
            local id = 0
            if weapon[1] ~= nil then
                id = weapon[1].getTargetId()
            end
            local dmg = 0
            if ownData.ships == nil then ownData.ships = {} end
            for _,d in pairs(ownData.ships) do
        
                dmg = dmg + d.dmg
            end
            
            local svg = [[
                <svg viewBox="0 0 100 80" style="width:100%;height:100%">
                    <rect x="0%" y="0%" rx="2" ry="2" width="100%" height="80%" style="fill:#4682B4;fill-opacity:0.1" />
                    <text x="5%" y="7.5%" style="fill:#FFFFFF;font-size:5">CombatLog</text>
                    <text x="50%" y="7.5%" style="fill:#FFFFFF;font-size:4">TargetData</text>
                    <text x="50%" y="12%" style="fill:#FFFFFF;font-size:3">Dmg: </text>
                    <text x="50%" y="16%" style="fill:#FFFFFF;font-size:3">DesElements: </text>
        
        
                    <text x="50%" y="30%" style="fill:#FFFFFF;font-size:3">TotalDmg: </text>
                    <text x="50%" y="35%" style="fill:#FFFFFF;font-size:3">TotalKills: </text>
        
                    <text x="50%" y="50%" style="fill:#FFFFFF;font-size:4">WData</text>
                    <text x="65%" y="50%" style="fill:#FFFFFF;font-size:3">Hits</text>
                    <text x="80%" y="50%" style="fill:#FFFFFF;font-size:3">Shots</text>
                ]]
            local ID = tostring(id)
            if id > 1 and ownData.ships[ID] ~= nil then
                local sd = ownData.ships[ID].dmg
                local se = #ownData.ships[ID].edes
                for _,tab in pairs(otherData) do
                    
                    if  tab.ships[ID] ~= nil then
                        sd = sd + tab.ships[ID].dmg
                        se = se + #tab.ships[ID].edes
                    end
                end
                svg = svg .. [[
                    <text x="80%" y="12%" style="fill:#FFFFFF;font-size:3">]].. round(sd) ..[[</text>
                    <text x="80%" y="16%" style="fill:#FFFFFF;font-size:3">]].. se ..[[</text>]]
            end
            svg = svg .. [[<text x="80%" y="30%" style="fill:#FFFFFF;font-size:3">]].. round(dmg) ..[[</text>]]
            svg = svg .. [[<text x="80%" y="35%" style="fill:#FFFFFF;font-size:3">]].. round(#ownData.data.kills) ..[[</text>]]
            local y = 4
            for _,w in pairs(weapon) do
                local id = w.getLocalId()
                if weaponMisses[id] == nil then weaponMisses[id] = 0 end
                if weaponHits[id] == nil then weaponHits[id] = 0 end
        
                local shots = weaponHits[id] + weaponMisses[id]
                local pro = 100
                if shots > 0 then
                    pro = weaponHits[id] / shots * 100
                end
                local n = w.getName()
                local n1 = string.find(n,"%[") + 1
                local n2 = string.find(n,"]") - 1
                n = string.sub(n,n1,n2)
                svg = svg .. [[<text x="50%" y="]] .. 50 + y .. [[%" style="fill:#FFFFFF;font-size:3">]]..n..[[: </text>]]
                svg = svg .. [[<text x="65%" y="]] .. 50 + y .. [[%" style="fill:#FFFFFF;font-size:3">]]..round(pro,2)..[[%</text>]]
                svg = svg .. [[<text x="80%" y="]] .. 50 + y .. [[%" style="fill:#FFFFFF;font-size:3">]]..shots..[[</text>]]
                y = y + 4
            end
            for i = 0,15,1 do
                if i >= #log then break end
                svg = svg .. [[<text x="2%" y="]] .. 12 + i*4 .. [[%" style="fill:#FFFFFF;font-size:3">]]..log[#log - i]..[[</text>]]
            end
            return svg .. [[</svg>]]
        end
        return self
        end
        package.preload[packagePrefix.."widgetcreator"] = function()
           local self = {}
        local auth = "AQN5B4-@7gSt1W?;"
        function self:valid(key)
            if key ~= auth then return false end
            return unitType == "gunner"
        end
        function self:register(env)
            _ENV = env
        	if not self:valid(auth) then return end
            register:addAction("unitOnStart", "WidgetCreate", function() self:CreateWidgets() end)
        end
        
        self.version = 0.9
        self.loadPrio = 20
        local u = unit
        local s = system
        function self:CreateWidgets()
            self:DestroyWidgets()
            self.DataIDs = {}
            self.Panels = {}
            if #weapon > 0 then
                if #weapon <= 3 then
                    local pan = s.createWidgetPanel("")
                    self.Panels[#self.Panels + 1] = pan
                    for n = 1,#weapon,1 do
                        if #self.DataIDs >= #weapon then break end
                        local wid = s.createWidget(pan, "weapon")
                        local data = weapon[n].getWidgetData()
                        table.insert(self.DataIDs, s.createData(data))
                        s.addDataToWidget(self.DataIDs[#self.DataIDs], wid)
                    end
                else
                    local num = math.ceil(#weapon / 2)
                    for k = 1,2,1 do
                        local pan = s.createWidgetPanel("")
                        self.Panels[#self.Panels + 1] = pan
                        for n = 1,num,1 do
                            local wid = s.createWidget(pan, "weapon")
                            local data = weapon[#self.DataIDs + 1].getWidgetData()
                            table.insert(self.DataIDs, s.createData(data))
                            s.addDataToWidget(self.DataIDs[#self.DataIDs], wid)
                            if #self.DataIDs >= #weapon then break end
                        end
                    end
                end
            end
        
            local radar = radar[1]
            if radar ~= nil then
                local pan = s.createWidgetPanel("")
                self.Panels[#self.Panels + 1] = pan
                local wid = s.createWidget(pan, "radar")
                local data = radar.getWidgetData()
                self.RadarDataID = s.createData(data)
                s.addDataToWidget(self.RadarDataID, wid)
            end
        end
        function self:DestroyWidgets()
            if self.Panels ~= nil then
                for _,pan in pairs(self.Panels) do
                    s.destroyWidgetPanel(pan)
                end
            end
        end
        return self
        
        end
        package.preload[packagePrefix.."config"] = function()
           -- Config holds public configuration values (unencrypted)
        local self = {}
        
        local configData = nil
        local usedKeys = {}
        function self:get(param, default)
            if configData == nil then self:load() end
            usedKeys[param] = true
            if configData[param] == nil then return default end
            if default ~= nil and configData[param] == default then
                configData[param] = nil
                return default
            end
        
            return configData[param]
        end
        function self:set(param, val, default)
            if configData == nil then self:load() end
            usedKeys[param] = true
            if configData[param] ~= val then
                if val == default then
                    configData[param] = nil
                else
                    configData[param] = val
                end
        
                self:save()
            end
        end
        function self:load()
            if configData == nil then
                if database.hasKey ~= nil and database.hasKey("config"..unitType..unit.getLocalId()) == 1 then
                    local currStr = database.getStringValue("config"..unitType..unit.getLocalId())
                    configData = json.decode(currStr)
                end
                if configData == nil then
                    configData = {}
                end
            end
        end
        function self:save()
            if configData ~= nil then
                if database.hasKey ~= nil then
                    database.setStringValue("config"..unitType..unit.getLocalId(),json.encode(configData))
                end
            end
        end
        function self:cleanup()
            if configData == nil then return end
        
            local change = false
            for name, value in pairs(configData) do
                if usedKeys[name] == nil then
                    change = true
                    configData[name] = nil
                end
            end
            if change then
                self:save()
            end
        end
        function self:register(env)
            _ENV = env
        
            register:addAction("systemStop","configCleanup",
                    function()
                        self:cleanup()
                    end
            )
        end
        return self
        end
        package.preload[packagePrefix.."shortname"] = function()
           local self = {}
        --three letter ship code----------------
        local kSkipCharSet = {["O"] = true, ["Q"] = true, ["0"] = true}
        local kCharSet = {}
        self.version = 0.9
        self.loadPrio = 20
        
        local auth = "AQN5B4-@7gSt1W?;"
        
        local IdList,CodeList = {},{}
        function self:valid(key)
            if key ~= auth then return false end
            return unitType == "gunner"
        end
        
        function addRangeToCharSet(a, b)
            for i=a,b do
                local c = string.char(i)
                if not kSkipCharSet[c] then
                    kCharSet[#kCharSet+1] = c
                end
            end
        end
        
        -- 0 - 9
        addRangeToCharSet(48, 57)
        -- A - Z
        addRangeToCharSet(65, 90)
        
        kCharSetSize = #kCharSet
        
        function getHash(x)
            x = (x >> 16) ~ x
            x = x * 0x45d9f3b
            x = (x >> 16) ~ x
            x = x * 0x45d9f3b
            x = (x >> 16) ~ x
            if x < 0 then x = ~x end
            return x
        end
        function createShortName(id)
            local id = tonumber(id)
            if id == nil then return "" end
            local seed = getHash(id)%8388593
            local a = (seed*653276)%8388593
            local b = (a*653276)%8388593
            local c = (b*653276)%8388593
            return kCharSet[a%kCharSetSize+1] .. kCharSet[b%kCharSetSize+1] .. kCharSet[c%kCharSetSize+1]
        end
        function self:getShortName(id)
            if IdList[id] == nil then
                local ID = createShortName(id)
                IdList[id] = ID
                CodeList[ID] = id
            end
            return IdList[id]
        end
        function self:getId(ID)
            return CodeList[ID]
        end
        
        return self
        
        end
        package.preload[packagePrefix.."gunnerhud"] = function()
           local self = {}
        local auth = "AQN5B4-@7gSt1W?;"
        function self:valid(key)
            if key ~= auth then return false end
            return unitType == "gunner"
        end
        self.version = 0.9
        self.loadPrio = 1000
        self.viewTags = {"hud"}
        local newShipWar = 0
        local newShip = {}
        local oldTargetspeed = 0
        local u = unit
        local s = system
        local uiDied = 0
        local lastShip = 0
        local cmd,ownShortName,sleader,leader,rw,sn
        local radar = radar[1]
        function self:register(env)
        	if not self:valid(auth) then return end
            cmd = getPlugin("commandhandler")
            rw = getPlugin("radarwidget",true,auth)
            sn = getPlugin("shortname",true,auth)
            cmd:AddCommand("l",function (input)
                if input[2] ~= nil then
                    leader = sn:getId(input[2]:upper())
                    if leader == nil then sleader = input[2]:upper() end
                else
                    leader = radar.getTargetId()
                    if leader == 1 then leader = nil end
                end
            end,"sets your Leader")
            addTimer("Leader",0.5,function ()
                if leader ~= nil then
                    local n = sn:getShortName(leader)
                    local p = radar.getConstructWorldPos(leader)
                    if database.hasKey ~= nil then
                        if n ~= nil and p[1] ~= 0 then
                            database.setStringValue("Leader",json.encode({n = n,p = radar.getConstructWorldPos(leader),t = system.getArkTime()}))
                        else
                            database.clearValue("Leader")
                        end
                    end
                else
                    database.clearValue("Leader")
                end
            end)
            ownShortName = getPlugin("shortname",true,"AQN5B4-@7gSt1W?;"):getShortName(construct.getId())
            register:addAction("OnEnter","Alarm",function (id)
                newShipWar = 20
                table.insert(newShip,id)
                lastShip = id
            end)
            register:addAction("OnDestroyed","Kill",function (id)
                uiDied = system.getArkTime()
            end)
            if construct.getParent() ~= 0 then
                leader = construct.getParent()
            end
            local screener = getPlugin("screener")
            if screener ~= nil then
                screener:registerDefaultScreen("mainScreenThird","gunnerhud")
                screener:registerDefaultScreen("mainScreenFirst","gunnerhud")
        
                screener:addView("gunnerhud",self)
            end
        
            register:addAction("option8Start","Vent",function()
                if shield ~= nil then
                    if shield.isVenting() == 0 then
                        shield.startVenting()
                        system.playSound("HSC/venting_shield.mp3")
                    else
                        shield.stopVenting()
                    end
                end
            end)
            for _,db in pairs(databases) do
                if db.hasKey ~= nil then
                    db.clearValue("AutoTurnOff")
                end
            end
            register:addAction("unitOnStop","autoDeactivate",function ()
                for _,db in pairs(databases) do
                    if db.hasKey ~= nil then
                        db.setStringValue("AutoTurnOff",player.getId())
                    end
                end
            end)
        
        end
        
        function self:setScreen()
        	local uiShieldPercent = 0
        	local uiShieldActive = 0
            if shield ~= nil then           
                uiShieldPercent = math.ceil(shield.getShieldHitpoints() / shield.getMaxShieldHitpoints()*100)
                uiShieldActive = shield.isActive()
            end
            local uiHitchance, uiTargetSpeed, uiTargetSpeedUp, uiTargetDist, uiTargetID, uiMaxV, _, uiAmmoType = targetHud()
            
            local uiAmmoPercent,uiRelaodTime = getMinAmmo()
            local shieldBar = uiShieldPercent
            local ammoBar = uiAmmoPercent
            local corestress = 0
            if core ~= nil then
                corestress = (1-core.getCoreStressRatio()) * 100
            end
            local color
        
            ------
            local svgOut = "<svg width=\"100%\" height=\"94.5%\" viewBox=\"0 0 1920 1080\" style=\"top:0;left:0\">"
        
            -- window mid buttom
            svgOut = svgOut .. "<rect x=\"52%\" y=\"93.95%\" rx=\"2\" ry=\"2\" width=\"23.15%\" height=\"4.8%\" style=\"fill:#4682B4;fill-opacity:0.35\" />" ..
                            "<rect x=\"52.2%\" y=\"96.4%\" width=\"7.25%\" height=\"1.9%\" style=\"fill:none;stroke:#FFFFFF;stroke-width:1px\" />" ..
                            "<rect x=\"59.95%\" y=\"96.4%\" width=\"7.25%\" height=\"1.9%\" style=\"fill:none;stroke:#FFFFFF;stroke-width:1px\" />" ..
                            "<rect x=\"67.7%\" y=\"96.4%\" width=\"7.25%\" height=\"1.9%\" style=\"fill:none;stroke:#FFFFFF;stroke-width:1px\" />" 
        
            -- shield
            if shield ~= nil then           
                svgOut = svgOut .. "<text x=\"52.35%\" y=\"95.8%\" font-family=\"Super Sans\" text-anchor=\"start\" style=\"fill:#FFFFFF;font-size:15px\">Shield (" .. round(uiShieldPercent,2) .."%)</text>"
                if uiShieldActive == 0 then 
                    color = "#777777"
                else
                    if shieldBar >= 66 then color = "#009acd" else
                        if shieldBar < 66 and shieldBar > 33 then color = "#FFA500" end
                        if shieldBar <= 33  then color = "#FF0000" end
                    end
                end
                for i = 0,19,1 do
                    if shieldBar > 0 then svgOut = svgOut .. "<rect width=\"0.25%\" height=\"1.225%\" x=\"" .. 52.35 + (0.35*i) .. "%\" y=\"96.7%\" style=\"fill:" .. color .. "\" />" end
                    if shieldBar <= 0 then svgOut = svgOut .. "<rect width=\"0.25%\" height=\"1.225%\" x=\"" .. 52.35 + (0.35*i) .. "%\" y=\"96.7%\" style=\"fill:#2C3539\" />" end    
                    shieldBar = shieldBar - 5
                end
            end
        
            -- core stress
            if core ~= nil then
                svgOut = svgOut .. "<text x=\"60.1%\" y=\"95.8%\" font-family=\"Super Sans\" text-anchor=\"start\" style=\"fill:#FFFFFF;font-size:15px\">C. Stress ("..round((1-core.getCoreStressRatio()) * 100,2).."%)</text>"
                if corestress >= 100 then color = "#32CD32" else
                    if corestress < 100 and corestress > 66 then color = "#FFA500" end
                    if corestress <= 66 then color = "#FF0000" end
                end
                for i = 0,19,1 do
                    if corestress > 0 then svgOut = svgOut .. "<rect width=\"0.25%\" height=\"1.225%\" x=\"" .. 60.1 + (0.35*i) .. "%\" y=\"96.7%\" style=\"fill:" .. color .. "\" />" end
                    if corestress <= 0 then svgOut = svgOut .. "<rect width=\"0.25%\" height=\"1.225%\" x=\"" .. 60.1 + (0.35*i) .. "%\" y=\"96.7%\" style=\"fill:#2C3539\" />" end    
                    corestress = corestress - 5
                end    
            end
        
            -- ammo
            svgOut = svgOut .. "<text x=\"67.85%\" y=\"95.8%\" font-family=\"Super Sans\" text-anchor=\"start\" style=\"fill:#FFFFFF;font-size:15px\">Ammo (" .. uiRelaodTime .. ")</text>"
            if ammoBar > 33 then color = "#CD661D" else
                if ammoBar <= 33 then color = "#FF0000" end
            end
            for i = 0,19,1 do
                if ammoBar > 0 then svgOut = svgOut .. "<rect width=\"0.25%\" height=\"1.225%\" x=\"" .. 67.85 + (0.35*i) .. "%\" y=\"96.7%\" style=\"fill:" .. color .. "\" />" end
                if ammoBar <= 0 then svgOut = svgOut .. "<rect width=\"0.25%\" height=\"1.225%\" x=\"" .. 67.85 + (0.35*i) .. "%\" y=\"96.7%\" style=\"fill:#2C3539\" />" end    
                ammoBar = ammoBar - 5
            end  
        
            if radar.getTargetId() ~= 0 then
                local s = sn:getShortName(radar.getTargetId())
                if system.getCameraMode() ~= 1 then
                    svgOut = svgOut .. "<text x=\"49.2%\" y=\"49%\" font-family=\"Super Sans\" text-anchor=\"start\" style=\"fill:#FFFFFF;font-size:15px\">" .. s .. "</text>"
                else
                    svgOut = svgOut .. "<text x=\"49%\" y=\"3%\" font-family=\"Super Sans\" text-anchor=\"start\" style=\"fill:#FFFFFF;font-size:25px\">" .. s .. "</text>"
                end
            end
        
        
            local content5 = ""
            -- target data
            if uiTarget == true then
                if uiHitchance < 10 then 
                    color = "#FF0000" 
                elseif uiHitchance <= 30 then 
                    color = "#FFA500"
                else
                    color = "#32CD32"
                end
        
                svgOut = svgOut .. "<rect x=\"" .. 52 .. "%\" y=\"89%\" rx=\"2\" ry=\"2\" width=\"23.15%\" height=\"4.8%\" style=\"fill:#4682B4;fill-opacity:0.35\"/>"
                svgOut = svgOut .. "<text x=\"" .. 52 + 0.5 .. "%\" y=\"91.8%\" style=\"fill:#FFFFFF;font-size:12px\">" .. "Hitchance:" .. "</text>"
                                .. "<text x=\"" .. 52 + 4 .. "%\" y=\"92%\" style=\"fill:".. color ..";font-size:20px\">" .. uiHitchance .."%</text>"
                if uiTargetSpeedUp == 0 then color = "#FFA500" elseif uiTargetSpeedUp < 0 then color = "#FF0000" else color = "#32CD32" end
        
                svgOut = svgOut .. "<text x=\"" .. 59 .. "%\" y=\"90.5%\" style=\"fill:#FFFFFF;font-size:12px\">" .. "Target Speed:" .. "</text>"
                                .. "<text x=\"" .. 59 + 4.5 .. "%\" y=\"91%\" style=\"fill:".. color ..";font-size:20px\">" .. uiTargetSpeed .."</text>"
        
                local DifSpeed = construct.getMaxSpeed()*3.6 - uiMaxV
                if math.abs(DifSpeed) < 500 then color = "#FFA500" elseif DifSpeed < 0 then color = "#FF0000" else color = "#32CD32" end
                if radar.getConstructKind(uiTargetID) == 5 then
                    svgOut = svgOut .. "<text x=\"" .. 59 .. "%\" y=\"93.1%\" style=\"fill:#FFFFFF;font-size:12px\">" .. "   Max Speed:" .. "</text>"
                                    .. "<text x=\"" .. 59 + 4.2 .. "%\" y=\"93.3%\" style=\"fill:".. color ..";font-size:15px\">" .. uiMaxV .."</text>"
                else
                    svgOut = svgOut .. "<text x=\"" .. 59 .. "%\" y=\"93.1%\" style=\"fill:#FFFFFF;font-size:12px\">" .. "   Max Speed:" .. "</text>"
                                    .. "<text x=\"" .. 59 + 4.2 .. "%\" y=\"93.3%\" style=\"fill:#FFFFFF;font-size:15px\"> Static </text>"
                end
        
        
                ammo = uiAmmoType
                
                --svgOut = svgOut .. "<text x=\"" .. 67 + 0.5 .. "%\" y=\"90.5%\" style=\"fill:#FFFFFF;font-size:14px\">" .. "Radial Speed:" .. "</text>"
                --                .. "<text x=\"" .. 72 + 0.5 .. "%\" y=\"90.5%\" style=\"fill:".. color ..";font-size:14px\">" .. uiTargetRadialSpeed .."</text>"
                local w = "false"
                if radar.getConstructInfos(uiTargetID).weapons ~= 0 then w = "true" end
                svgOut = svgOut .. "<text x=\"" .. 67 + 0.5 .. "%\" y=\"90.5%\" style=\"fill:#FFFFFF;font-size:12px\">" .. "Weaponised:" .. "</text>"
                                .. "<text x=\"" .. 71 + 0.5 .. "%\" y=\"90.5%\" style=\"fill:#FFFFFF;font-size:12px\">" .. w .."</text>"
                
                svgOut = svgOut .. "<text x=\"" .. 67 + 0.5 .. "%\" y=\"93.1%\" style=\"fill:#FFFFFF;font-size:12px\">" .. "Ammo Typ:" .. "</text>"
                                .. "<text x=\"" .. 71 + 0.5 .. "%\" y=\"93.1%\" style=\"fill:#FFFFFF;font-size:12px\">" .. ammo .."</text>"
                
                if math.abs(uiDied - system.getArkTime()) < 3  then
                    content5 = [[
        				<style>
        					#KillMarker {display:block; position:absolute; top:0; left:0} 
        				</style>
                        </svg>
                        <svg id="KillMarker" height="100%" width="100%">
                            <circle cx="50%" cy="50%" r="5%" stroke="red" stroke-width="1.5%" fill="none" opacity="0.5"/>
                        </svg>
                    ]]
                end
            end
        
            if ownShortName ~= nil and system.isViewLocked() ~= 1 then
                svgOut = svgOut .. "<rect x=\"" .. 69.4 .. "%\" y=\"84.1%\" rx=\"2\" ry=\"2\" width=\"5.75%\" height=\"4.75%\" style=\"fill:#4682B4;fill-opacity:0.35\"/>"
                svgOut = svgOut .. "<text x=\"" .. 70.4 .. "%\" y=\"87.1%\" style=\"fill:#FFFFFF;font-size:20px\">ID: " .. ownShortName .."</text>"
            end 
            if sleader ~= nil then
                leader = sn:getId(sleader)
                if leader ~= nil then sleader = nil end
            end
            if leader ~= nil then
                local ID = leader
                if ID ~= nil then
                    local Dis = radar.getConstructDistance(ID) / (1000)
                    if Dis <= 0 or Dis == nil then
                        svgOut = svgOut .. "<rect x=\"" .. 58 .. "%\" y=\"86.1%\" rx=\"2\" ry=\"2\" width=\"11.38%\" height=\"2.75%\" style=\"fill:#4682B4;fill-opacity:0.35\"/>"
                        svgOut = svgOut .. "<text x=\"" .. 58.4 .. "%\" y=\"88%\" style=\"fill:#FF0000;font-size:15px\">Leader is out of Range</text>"                                
                    else
                        if Dis < 100 then color = "#32CD32" elseif Dis < 300 then color = "#FFA500" else color = "#FF0000" end 
                        svgOut = svgOut .. "<rect x=\"" .. 58 .. "%\" y=\"86.1%\" rx=\"2\" ry=\"2\" width=\"11.38%\" height=\"2.75%\" style=\"fill:#4682B4;fill-opacity:0.35\"/>"
                        svgOut = svgOut .. "<text x=\"" .. 58.4 .. "%\" y=\"88%\" style=\"fill:#FFFFFF;font-size:15px\">Distance to Leader:</text>"
                        if Dis < 100 then
                            svgOut = svgOut .. "<text x=\"" .. 66.3 .. "%\" y=\"88%\" style=\"fill:".. color ..";font-size:15px\">" .. round(Dis, 1) .. "</text>"
                            svgOut = svgOut .. "<text x=\"" .. 68 .. "%\" y=\"88%\" style=\"fill:#FFFFFF;font-size:15px\">km</text>"
                        else
                            svgOut = svgOut .. "<text x=\"" .. 66.3 .. "%\" y=\"88%\" style=\"fill:".. color ..";font-size:15px\">" .. round(Dis / 200,1) .. "</text>"
                            svgOut = svgOut .. "<text x=\"" .. 68 .. "%\" y=\"88%\" style=\"fill:#FFFFFF;font-size:15px\">su</text>"
                        end
                    end
                else
                    svgOut = svgOut .. "<rect x=\"" .. 58 .. "%\" y=\"86.1%\" rx=\"2\" ry=\"2\" width=\"11.38%\" height=\"2.75%\" style=\"fill:#4682B4;fill-opacity:0.35\"/>"
                    svgOut = svgOut .. "<text x=\"" .. 58.4 .. "%\" y=\"88%\" style=\"fill:#FF0000;font-size:15px\">Leader is out of Range</text>"
                end
            end
            svgOut = svgOut .. "</g>"
        
            -- Key-Bindings
            svgOut = svgOut .. "<rect x=\"28.25%\" y=\"91.95%\" rx=\"2\" ry=\"2\" width=\"8.2%\" height=\"6.8%\" style=\"fill:#4682B4;fill-opacity:0.35\" />"
            if uiShieldActive == 1 then colorShield = "#FFFFFF" else colorShield = "#FF0000" end 
            if isVenting == 0 then colorVenting = "#FFFFFF" else colorVenting = "#00FF00" end 
        
            if shield ~= nil then
            svgOut = svgOut .. "<text x=\"28.5%\" y=\"95.8%\" font-family=\"Super Sans\" text-anchor=\"start\" style=\"fill:" .. colorVenting ..";font-size:15px\">" ..
                            "Venting (Alt+8)  " .. round(shield.getVentingCooldown(),0) .. " </text>"
            end
            svgOut = svgOut .. "<text x=\"28.5%\" y=\"93.8%\" font-family=\"Super Sans\" text-anchor=\"start\" style=\"fill:#FFFFFF;font-size:15px\">CMCI On/Off (Alt+6) </text>"
            
            svgOut = svgOut .. "<text x=\"28.5%\" y=\"97.8%\" font-family=\"Super Sans\" text-anchor=\"start\" style=\"fill:#FFFFFF;font-size:15px\">" ..
                            "Radar (Alt+3) </text>"
        
            svgOut = svgOut .. "</svg>"
            local a,b = pcall(AlarmHud)
            if not a then b = "" end
            return svgOut .. content5 .. StatsHud() .. b
        end
        
        function ConeHUD() --zu groß
            local w = weapon[1]
            svg = [[ 
                <svg id="StatsHud" height="100%" width="100%" viewBox="0 0 1920 1080">]]
        
            local dist = w.getOptimalDistance()
            print(dist)
            if w.getTargetId() > 0 then 
                dist = radar.getConstructDistance(w.getTargetId())
            end
            local pos = construct.getWorldPosition()
            local wf = construct.getWorldForward()
            local wr = construct.getWorldOrientationRight()
            local gegen = math.tan(w.getOptimalAimingCone()) * dist
            local v = library.getPointOnScreen({pos[1]+ wf[1]*dist, pos[2]+ wf[2]*dist, pos[3]+ wf[3]*dist})
            local v2 = library.getPointOnScreen({pos[1]+ wf[1]*dist + wr[1]*gegen, pos[2]+ wf[2]*dist + wr[2]*gegen, pos[3]+ wf[3]*dist + wr[3]*gegen})
            if v[1] == 0 and v[2] == 0 and v[3] == 0 then v = {-10,-10,-10} v2 = {-10,-10,-10} end
            --v2 = v2[1] - v[1]
            print(v2)
            svg = svg .. "<circle style=\"fill:#00FF00;opacity:0.1;\" cx=\"".. v[1]*1920 .. "\" cy=\"".. v[2]*1080 .. "\" r=\"" .. 0.3*1080 .."\" />" --svgGegenScope
            svg = svg .. "<circle style=\"fill:#00FF00;opacity:0.1;\" cx=\"".. v2[1]*1920 .. "\" cy=\"".. v2[2]*1080 .. "\" r=\"" .. 0.1*1080 .."\" />" --svgGegenScope
        
            return svg .. "</svg>"
        end
        
        function StatsHud()
            local content6 = [[
        		<style>
        			#StatsHud {display:block; position:absolute; top:0; left:0} 
        			#StatsHud text {fill:aqua;font-family:Montserrat;fill:#FFFFFF;font-size:12px}
        		</style>
        
                <svg id="StatsHud" height="100%" width="100%" viewBox="0 0 1920 1080">]]
        
            --FightStats
            content6 = content6 .. "<rect x=\"76.06%\" y=\"93.95%\" rx=\"2\" ry=\"2\" width=\"15%\" height=\"4.8%\" style=\"fill:#4682B4;fill-opacity:0.35\" />"
        
            content6 = content6 .. "<text x=\"76.6%\" y=\"95.2%\">Type</text>"
            content6 = content6 .. "<text x=\"76.6%\" y=\"96.7%\">Hostile</text>"
            content6 = content6 .. "<text x=\"76.6%\" y=\"98.2%\">Friendly</text>"
        
            content6 = content6 .. "<text x=\"80.1%\" y=\"95.2%\">L</text>"
            content6 = content6 .. "<text x=\"80.1%\" y=\"96.7%\">".. #rw.ConstructSort[0][5].L .."</text>"
            content6 = content6 .. "<text x=\"80.1%\" y=\"98.2%\">".. #rw.ConstructSort[1][5].L .."</text>"
        
            content6 = content6 .. "<text x=\"82.1%\" y=\"95.2%\">M</text>"
            content6 = content6 .. "<text x=\"82.1%\" y=\"96.7%\">".. #rw.ConstructSort[0][5].M .."</text>"
            content6 = content6 .. "<text x=\"82.1%\" y=\"98.2%\">".. #rw.ConstructSort[1][5].M .."</text>"
        
            content6 = content6 .. "<text x=\"84.1%\" y=\"95.2%\">S</text>"
            content6 = content6 .. "<text x=\"84.1%\" y=\"96.7%\">".. #rw.ConstructSort[0][5].S .."</text>"
            content6 = content6 .. "<text x=\"84.1%\" y=\"98.2%\">".. #rw.ConstructSort[1][5].S .."</text>"
        
            content6 = content6 .. "<text x=\"86.1%\" y=\"95.2%\">XS</text>"
            content6 = content6 .. "<text x=\"86.1%\" y=\"96.7%\">".. #rw.ConstructSort[0][5].XS .."</text>"
            content6 = content6 .. "<text x=\"86.1%\" y=\"98.2%\">".. #rw.ConstructSort[1][5].XS .."</text>"
        
            local StaF = rw.ConstructSort[1][6]
            local StaH = rw.ConstructSort[0][6]
            content6 = content6 .. "<text x=\"88.1%\" y=\"95.2%\">Station</text>"
            content6 = content6 .. "<text x=\"88.1%\" y=\"96.7%\">".. #StaH.L + #StaH.M + #StaH.S + #StaH.XS .."</text>"
            content6 = content6 .. "<text x=\"88.1%\" y=\"98.2%\">".. #StaF.L + #StaF.M + #StaF.S + #StaF.XS .."</text>"
        
            content6 = content6 .. [[</svg>]]
            return content6
        end
        
        function AlarmHud()
            local old_radar = 0
            local content2 = [[
        		<style>
        			#AlarmHud, #AlarmHud svg {display:block; position:absolute; top:0; left:0} 
        			#AlarmHud #FriendContact line {stroke:#01DF01;opacity:0.4;stroke-width:10%;fill-opacity:0;}
        			#AlarmHud #EnemyContact line {stroke:#FF0000;opacity:0.4;stroke-width:10%;fill-opacity:0;}
        		</style>
        
                <svg id="AlarmHud" height="100%" width="100%" viewBox="0 0 1920 1080">
                <g id="Layer_2">
                <title>Layer 2</title>
                ]]
        
            local zone = false
            if weapon[1] ~= nil then
                if weapon[1].getWidgetData ~= nil then
                    data1 = json.decode(weapon[1].getWidgetData())
                    zone = data1.properties.outOfZone
                end
            end
            if zone == false then
                if system.getArkTime() - bootTime < 10 then
                    newShip = {}
                    newShipWar = 0
                end
                if newShipWar > 0 then      
                    if #newShip > 0 and not devMode then
                        local sizex = radar.getConstructCoreSize(newShip[1])
                        print("------------")
                        print("New Contact")
                        print(sizex)
                        print(getPlugin("shortname",true,"AQN5B4-@7gSt1W?;"):getShortName(newShip[1]) .. "-" .. radar.getConstructName (newShip[1])) 
                        print(newShip[1])
                        print(system.getWaypointFromPlayerPos())
                        table.remove(newShip,1)
                    end
                    if radar.hasMatchingTransponder(lastShip) == 1 then
                        system.playSound("HSC/new_radar_friend.mp3")
                        content2 = content2..[[
                        <svg id="FriendContact" x="0%" y="0%">
                        <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_2" y2="0" x2="1920" y1="0" x1="0" fill="none"/>
                        <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_3" y2="1080" x2="0" y1="0" x1="0" fill="none"/>
                        <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_4" y2="1080" x2="1920" y1="0" x1="1920" fill="none"/>
                        <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_5" y2="1080" x2="1920" y1="1080" x1="0" fill="none"/>
                        ]]
                    else                        
                        system.playSound("HSC/new_radarcontact.mp3") 
                        content2 = content2..[[
                            <svg id="EnemyContact" x="0%" y="0%">
                            <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_2" y2="0" x2="1920" y1="0" x1="0" fill="none"/>
                            <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_3" y2="1080" x2="0" y1="0" x1="0" fill="none"/>
                            <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_4" y2="1080" x2="1920" y1="0" x1="1920" fill="none"/>
                            <line stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_5" y2="1080" x2="1920" y1="1080" x1="0" fill="none"/>
                            ]]
                    end
                    newShipWar = newShipWar - 1
                end
            end    
            content2 = content2..[[
                </svg>
                ]] 
            return content2
        end
        function getMinAmmo()
            local minCount = 99
            for _,w in ipairs(weapon) do
                local a = w.getAmmoCount()
                if a < minCount then
                    minCount = a
                end
            end
            local minTime = 0
            local minPercent = 100
            if weapon[1]~= nil then
                minTime = weapon[1].getCycleTime() * minCount
                minPercent = minCount / weapon[1].getMaxAmmo()
            end
            if minTime < 10 and relaod_warning == false then
                system.playSound("HSC/ammo_relaod.mp3")
                relaod_warning = true
            elseif  minTime > 10 and relaod_warning == true then
                relaod_warning = false
            end
            return minPercent * 100, FormatTimeString(minTime)
        end
        function FormatTimeString(seconds) -- Format a time string for display
            local minutes = 0
            local hours = 0
            local days = 0
            if seconds < 60 then
                seconds = math.floor(seconds)
            elseif seconds < 3600 then
                minutes = math.floor(seconds / 60)
                seconds = math.floor(seconds % 60) 
            elseif seconds < 86400 then
                hours = math.floor(seconds / 3600)
                minutes = math.floor( (seconds % 3600) / 60)
            else
                days = math.floor ( seconds / 86400)
                hours = math.floor ( (seconds % 86400) / 3600)
            end
            if days > 0 then 
                return days .. "d " .. hours .."h "
            elseif hours > 0 then
                return hours .. "h " .. minutes .. "m "
            elseif minutes > 0 then
                return minutes .. "m " .. seconds .. "s"
            elseif seconds > 0 then 
                return seconds .. "s"
            else
                return "0s"
            end
        end
        function targetHud()
            local id = radar.getTargetId()           
            local hitchance = 0
            local targetspeed = 0
            local targetDist = 0
            local targetspeedUp = 0 
            local MaxV = 0
            local Died = false
            local ammo = "Precision"
            uiTarget = false
        
            local w_id = nil
            for i,wp_count in ipairs(weapon) do
                if wp_count.getHitPoints() > 0 then
                    w_id = wp_count
                    break
                end
            end
        
            if w_id ~= nil and id ~= 0 and radar.isConstructIdentified(id) == 1 then
                local S = w_id.getWidgetData()
                local _,n = string.find(S, [["hitProbability":]])
                local n2 = string.find(S, [[,]], n)
                hitchance = round(tonumber(string.sub(S, n +1, n2 -1))* 100) 
                targetspeed = round(radar.getConstructSpeed(id) * 3.6)
                targetspeedUp = targetspeed - oldTargetspeed
                oldTargetspeed = targetspeed
                targetDist = radar.getConstructDistance(id)
                MaxV = round(self:MasstoMaxV(radar.getConstructMass(id)) *3.6)
                local Stat = radar.isConstructAbandoned(id)
                if oldTarget == id then
                    Died = Stat ~= oldTargetStatus
                end
                oldTargetStatus = Stat
                oldTarget = id
                uiTarget = true
        
                local _,n = string.find(S, [["optimalDistance":]])
                local n2 = string.find(S, [[,]], n)
                local a = tonumber(string.sub(S, n +1, n2 -1)) * 1.1
                if targetDist < a then ammo = "Heavy" end
            end
            return hitchance, targetspeed, targetspeedUp, targetDist, id, MaxV, Died, ammo
        end
        function self:MasstoMaxV(m)
            m = m
            local a = 13879 + (-0.0107 * m) + (6.86E-09 * m^2) + (-2.25E-15 * m^3) + (2.8E-22 * m^4)
            if m > 3000000 then a = 20000/3.6 end
            a = utils.clamp(a, 20000/3.6, 50000/3.6)
            return a 
        end
        return self
        
        end
        package.preload[packagePrefix.."weaponwidget"] = function()
           local self = {}
        local auth = "AQN5B4-@7gSt1W?;"
        function self:valid(key)
            if key ~= auth then return false end
            return unitType == "gunner"
        end
        self.version = 0.9
        local Widgets = nil
        local weapon = weapon
        s = system
        u = unit
        local Widgets,sn
        function self:register(env)
            _ENV = env
        	if not self:valid(auth) then return end
        	
        	Widgets = getPlugin("widgetcreator",true,auth) -- parameter 2 "true" prevents exception
            sn = getPlugin("shortname",true,auth)
        	if Widgets == nil then return end
        	
            register:addAction("unitOnStart", "WeaponStart", function() 
                register:addAction("systemOnUpdate", "weaponwidget", function() self:ReWriteWeapon() end)
            end)
        end
        
        --compacts the weapon widget
        function self:ReWriteWeapon()
            for k,ID in pairs(Widgets.DataIDs) do
                local data = weapon[k].getWidgetData()
                if data ~= nil then
                    local _,n1 = string.find(data,[["ammoName":"]])
                    local _,n2 = string.find(data,[["]],n1  +1)
                    if (n2 - n1) > 12 then
                        local ammo = mysplit(string.sub(data, n1, n2))
                        ammo = string.sub(ammo[2],0,4) .. string.sub(ammo[3],0,3)
                        data = string.sub(data, 0, n1) .. ammo .. string.sub(data, n2, #data)
                    end
                    local _,n3 = string.find(data,[["constructId":"]])
                    local tar = weapon[k].getTargetId()
                    local _,n5 = string.find(data,[["name":"]] , n3)
                    if n5 ~= nil then
                        local _,n6 = string.find(data,[["]],n5  +1)
                        data = string.sub(data, 0, n5) .. tostring(sn:getShortName(tar)) .. string.sub(data, n6, #data)
                    end
        
                    local _,n1 = string.find(data,[["name":"]]) --"name": "Exotic Precision Laser l [157]",
                    local _,n2 = string.find(data,[["]],n1  +1)
                    if (n2 - n1) > 12 then
                        local ammo = weapon[k].getLocalId() .. "  HC:  " .. round(weapon[k].getHitProbability()*100,2)
                        data = string.sub(data, 0, n1) .. ammo .. string.sub(data, n2, #data)
                    end
                    s.updateData(ID, data)
                end
            end
        end
        
        return self
        
        end
        package.preload[packagePrefix.."shieldreconfigure"] = function()
           local self = {}
        self.version = 0.9
        local auth = "AQN5B4-@7gSt1W?;"
        function self:valid(key)
            if key ~= auth then return false end
            return shield ~= nil
        end
        function self:register(env)
            _ENV = env
        	if shield == nil then return end
            shield.activate()
            register:addAction("OnAbsorbed", "shieldreconfigure", Shieldreconfigure) --TODO
        end
        local ress_old = {0,0,0,0}
        function getRes(stress, pool)
            local res = {0.15,0.15,0.15,0.15}
            if stress[1] >= stress[2] and 
                stress[1] >= stress[3] and 
                stress[1] > stress[4] then
                res = {pool,0,0,0}
            elseif stress[2] >= stress[1] and 
                    stress[2] >= stress[3] and 
                    stress[2] > stress[4] then
                res = {0,pool,0,0}
            elseif stress[3] >= stress[1] and 
                    stress[3] >= stress[2] and 
                    stress[3] > stress[4] then
                res = {0,0,pool,0}
            elseif stress[4] >= stress[1] and 
                    stress[4] >= stress[2] and 
                    stress[4] > stress[3] then
                res = {0,0,0,pool}
            else
                print("Fehler! Im else...")
            end
            return res
        end
        
        function Shieldreconfigure()
            if shield.getResistancesCooldown() == 0 then
            --print("Schilde rekonfigurieren!!!")
            local pool = shield.getResistancesPool()
            local stress = shield.getStressRatioRaw()
            local res = getRes(stress, pool)
            if ress_old[1] == res[1] and 
                ress_old[2] == res[2] and 
                ress_old[3] == res[3] and 
                ress_old[4] == res[4] then
                --print("Ress sind gleich!")
            else
                if shield.setResistances(res[1],res[2],res[3],res[4]) == 1 then
                    print("Schilde rekonfiguriert!")
                    ress_old[1] = res[1]
                    ress_old[2] = res[2]
                    ress_old[3] = res[3]
                    ress_old[4] = res[4]
                else
                    print("Fehler: "..shield.getStressRatioRaw()[1]..", "
                                        ..shield.getStressRatioRaw()[2]..", "
                                        ..shield.getStressRatioRaw()[3]..", "
                                        ..shield.getStressRatioRaw()[4])   
                end
            end
            end
        end
        return self
        
        end
        package.preload[packagePrefix.."radarwidget"] = function()
           local self = {}
        local auth = "AQN5B4-@7gSt1W?;"
        function self:valid(key)
            if key ~= auth then return false end
            return unitType == "gunner"
        end
        local radar = radar[1]
        self.version = 0.9
        self.viewTags = {"hud"}
        local Scroll = 0
        local Scrolling = false
        local showingConstructs,Widgets,shortname,commandhandler,setData,RadarData,showingConstructsf
        local friOrgs = {11169,7922,8228,2917,17654,6714,13995,9355,18058,4699,9574,17981,12746,5870,12601,8180,3516,9151,8697,3644,14719,6707}
        local friPlayer = {94563,57230,61799,27464,10561555748,47124,47130,95815,10505071758,114939}
        self.ConstructSort = {
            [0] = {
                [0] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                [1] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                [2] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                [3] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                [4] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                [5] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                [6] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                [7] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
            },
            [1] = {
                [0] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                [1] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                [2] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                [3] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                [4] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                [5] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                [6] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                [7] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
            },
            ["dead"] = {}
        }
        local settings = getPlugin("settings",true)
        
        function self:register(env)
            _ENV = env                    
            if shield ~= nil then
                if shield.getStressRatioRaw() == {0,0,0,0} then
                    shield.setResistances(0.3,0.3,0,0)
                end
            end
        	if not self:valid(auth) then return end
        
        	Widgets = getPlugin("widgetcreator",true,"AQN5B4-@7gSt1W?;")
        	shortname = getPlugin("shortname",true,"AQN5B4-@7gSt1W?;")
        
            settings:add("SpecialSort",true,"","Sort Core Size first then distance","Radar_Widget")
            settings:add("IdentifiedonTop",true,"","Puts the Identified on Top of the screens","Radar_Widget")
        
            commandhandler = getPlugin("commandhandler")
            commandhandler:AddCommand("hide",function (input)
                local str = input[2]
                for _,v in pairs(mysplit(str, ",")) do
                    v = string.sub(v,0,3)
                    if v == "spa" then v = 6 elseif v == "sta" then v = 4 elseif v == "dyn" then v = 5 else v = string.upper(v) end
                    settings:set(v, false,"Radar_Widget")
                end
            end,"hides core sizes: /hide XS,S,M,L,space,dynamic,static")
            commandhandler:AddCommand("show",function (input)
                local str = input[2]
                for _,v in pairs(mysplit(str, ",")) do
                    v = string.sub(v,0,3)
                    if v == "spa" then v = 6 elseif v == "sta" then v = 4 elseif v == "dyn" then v = 5 else v = string.upper(v) settings:set(v, true,"Radar_Widget_Size") return end
                    settings:set(v, true,"Radar_Widget_Type")
                end
            end,"shows core sizes: /show XS,S,M,L,space,dynamic,static")
        
            --if v == "spa" then v = 6 elseif v == "sta" then v = 4 elseif v == "dyn" then v = 5 end 
            commandhandler:AddCommand("t",function(input) self.tosearch = string.upper(input[2]) self.SpecialRadarMode = "Search" end,"show the target: /t TW4")
            commandhandler:AddCommand("togdead",function(input)
                settings:set("ShowDead", not settings:get("ShowDead","Radar_Widget"),"Radar_Widget")
            end,"toggles if dead cores are shown")
        
            commandhandler:AddCommand("settags",function(_,input)
                local input = mysplit(string.sub(input,2,#input))
                local str = input[2]
                local tabletag = {}
                for _,tag in pairs(mysplit(str, ",")) do 
                    table.insert(tabletag,tag)
                end
                if transponder ~= nil then
                    transponder.activate()
                    transponder.setTags(tabletag)
                end
            end,"sets the transponder Tags")
        
            commandhandler:AddCommand("gettags",function()
                if transponder ~= nil then
                    for _,tag in pairs(transponder.getTags()) do
                        print(tag)
                    end
                end
            end,"gets the transponder Tags")
        
            coRadar = coroutine.create(function() self:radarwidget() end)
            --toShowConstructs
            self.RadarMode = "Hostile" --"Friendly"; External; Verified; Hostile
            settings:add("ShowDead",true,"","if dead are to be shown","Radar_Widget")
        
            settings:add("XS",true,"","if XS are to be shown","Radar_Widget_Size")
            settings:add("S",true,"","if S are to be shown","Radar_Widget_Size")
            settings:add("M",true,"","if M are to be shown","Radar_Widget_Size")
            settings:add("L",true,"","if L are to be shown","Radar_Widget_Size")
            settings:add("XL",true,"","if XL are to be shown","Radar_Widget_Size")
        
            settings:add(1,true,"","if Universes are to be shown","Radar_Widget_Type")
            settings:add(2,true,"","if Planets are to be shown","Radar_Widget_Type")
            settings:add(3,true,"","if Asteroids are to be shown","Radar_Widget_Type")
            settings:add(4,true,"","if Statics are to be shown","Radar_Widget_Type")
            settings:add(5,true,"","if Dynamics are to be shown","Radar_Widget_Type")
            settings:add(6,true,"","if Spaces are to be shown","Radar_Widget_Type")
            settings:add(7,true,"","if Aliens are to be shown","Radar_Widget_Type")
        
            settings:add("2LevelAuth",false,"","Owner based identification","Radar_Widget")
        
            register:addAction("laltStart", "RadarScroll", function() Scrolling = true end)
            register:addAction("laltStop", "RadarScroll", function() Scrolling = false end)
            register:addAction("systemOnUpdate", "radarScroll", function()
                    if Scrolling then
                        Scroll = Scroll + system.getMouseWheel() * -3
                    end
                    setData()
                end)
            register:addAction("systemOnUpdate", "radarwidget", function()
                    if coroutine.status(coRadar) == "dead" then coRadar = coroutine.create(function() self:radarwidget() end) else coroutine.resume(coRadar) end
                end)
        
            addTimer("Trans", 0.4, self.AutoTrans)
        
            register:addAction("option3Start", "RadarSwitch", function() self:switchRadar() end)
            local screener = getPlugin("screener",true)
        
            if screener ~= nil then
                screener:registerDefaultScreen("mainScreenThird","Radar")
                screener:registerDefaultScreen("mainScreenFirst","Radar")
                screener:addView("Radar",self)
            end
        end
        
        local s = system
        local u = unit
        function self:switchRadar()
            if self.SpecialRadarMode ~= nil then
                self.SpecialRadarMode = nil
            elseif self.RadarMode == "Hostile" then
                self.RadarMode = "Friendly"
            elseif self.RadarMode == "Friendly" then
                self.RadarMode = "Verified"
            elseif self.RadarMode == "Verified" then
                self.RadarMode = "External"
        		local targets = getPlugin("Targets",true,"",true)
                if targets == nil then self.RadarMode = "Hostile" end
            elseif self.RadarMode == "External" then
                self.RadarMode = "Hostile"
            else
                self.RadarMode = "Hostile"
            end
        end
        function self:AddShip(id, RadarData, extra, k)
            k = k or 3
            extra = extra or ""
            local Ship,v = getSubJson(RadarData, tostring(id))
            if Ship ~= nil then
                Ship = AddUnique(Ship, id, extra)
        
                v = math.floor(v / 150)
                if Ship == nil then return end
                showingConstructs[k][v] = Ship
            end
        end
        function AddUnique(data, id, extra)
            local split = string.find(data, [["name":"]]) + #[["name":"]]
            return string.sub(data, 0, split -1) .. tostring(shortname:getShortName(id)) .. " - " .. extra .. string.sub(data, split, #data)
        end
        --checks which to choose
        function getSubJson(data,id)
            if radar.hasMatchingTransponder(id) == 1 then
                return getSubJF(data,id)
            else
                return getSubJH(data,id)
            end
        end
        --only for hostile possible
        function getSubJH(data,id)
            local min = string.find(data,id .. [[","]])
            if(min == nil) then return end
            local m = string.find(data, [["targetThreatState"]], min + 100)
            local max = string.find(data, [[}]], m)
            return string.sub(data, min - 16, max), min
        end
        --this is possible for Friendly
        function getSubJF(data,id)
            local min = string.find(data,id ..  [[","]])
            if(min == nil) then return end
            local _,max = string.find(data, [[)"}]], min +100) --"
            return string.sub(data, min - 16, max), min
        end
        
        function self:radarwidget()
            local ConstructSort = {
                [0] = {
                    [0] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                    [1] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                    [2] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                    [3] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                    [4] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                    [5] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                    [6] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                    [7] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                },
                [1] = {
                    [0] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                    [1] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                    [2] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                    [3] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                    [4] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                    [5] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                    [6] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                    [7] = {["XS"] = {},["S"] = {},["M"] = {},["L"] = {},["XL"] = {}},
                },
                ["dead"] = {}
            }
        
            
            local cList = radar.getConstructIds()
            local Data = radar.getWidgetData()
            RadarData = Data
            showingConstructs = {[1] = {},[2] = {},[3] = {},[4] = {},[5] = {},[6] = {}}
            local AlienCore = -1
        
            local n = 0
            for _,ID in pairs(cList) do
                n = n + 1
                local fri = radar.hasMatchingTransponder(ID)
                local dead = radar.isConstructAbandoned(ID) == 1
                if settings:get("2LevelAuth","Radar_Widget") then 
                    local id,o = radar.getConstructOwnerEntity(ID)
                    o = id.isOrganization
                    id = id.id
                    if o then
                        if not inTable(friOrgs,id) then
                            fri = 0
                        end
                    else
                        if not inTable(friPlayer,id) then
                            fri = 0
                        end
                    end
                end
                local size = radar.getConstructCoreSize(ID)
                local kind = radar.getConstructKind(ID)
                if kind == -1 then goto skip end --toCheck
                if kind == 7 then AlienCore = ID end
        
                if dead then
                    table.insert(ConstructSort["dead"], ID)
                else
                    table.insert(ConstructSort[fri][kind][size], ID)
                end
        
                --Sort for Widget
                if (self.RadarMode == "Hostile" or self.RadarMode == "Friendly") and self.SpecialRadarMode == nil then
                    if self.RadarMode == "Friendly" then fri = fri - 1 end
        
                    if fri == 0 and settings:get(size,"Radar_Widget_Size") and settings:get(kind,"Radar_Widget_Type") then
                        if not settings:get("ShowDead","Radar_Widget") and dead then goto skip end
                        local extra = ""
                        if settings:get("SpecialSort","Radar_Widget") then
                            if size == "XL" then k = 2 elseif size == "L" then k = 3 elseif size == "M" then k = 4 elseif size == "S" then k = 5 elseif size == "XS" then k = 6 end
                        end
                        if settings:get("IdentifiedonTop","Radar_Widget") then if radar.isConstructIdentified(ID) == 1 then k = 1 end end
                        if dead then extra = "dead - " end
                        
                        self:AddShip(ID,Data,extra,k)
                    end
                end
                ::skip::
                if n > 200 then n = 0 coroutine.yield() end
            end
            if self.SpecialRadarMode == nil then 
                local a,b = pcall(self.RadarModes[self.RadarMode],Data)
            else
                pcall(self.RadarModes[self.SpecialRadarMode],Data)
            end
            self.AlienCore = AlienCore
            self.ConstructSort = ConstructSort
            showingConstructsf = showingConstructs
        end
        
        function setData()
            local Data = RadarData
            if showingConstructsf == nil then return end
            local SortedConstructs = {[1] = {},[2] = {},[3] = {},[4] = {},[5] = {},[6] = {}}
            local p = 0 
            for k,t in pairs(showingConstructsf) do
                for c = 0,math.ceil(#Data / 150),1 do
                    p = p + 1
                    if t[c] ~= nil then 
                        SortedConstructs[k][#SortedConstructs[k] + 1] = t[c] 
                    end
                    if p > 5000 then p = 0 coroutine.yield() end
                end
            end
            --creates the new widget
            local ConsCount = 0
            for _,t in pairs(SortedConstructs) do
                ConsCount = ConsCount + #t
            end
            self.ConsCount = ConsCount
            local newList = {}
            for k,t in pairs(SortedConstructs) do
                for _,l in pairs(t) do
                    table.insert(newList,l)
                end
            end
            local max = #newList
            if Scroll > max -4 then Scroll = max -4 end
            if Scroll < 0 then Scroll = 0 end
            for c = 1, Scroll, 1 do 
                table.remove(newList,1)
            end
            local list = {}
            for _, value in ipairs(newList) do
                table.insert(list,value)
                if #list >= 4 then break end
            end
            local Ships = table.concat(list, ",") .. ","
        
            local Num = string.find(Data,[[],]])
            local EndString = string.sub(Data,Num,#Data)
            local _,Num2 = string.find(EndString,[["errorMessage":"",]])
            local _,n = string.find(EndString,[["worksInSpace":]])
            local n2 = string.find(EndString,[[e]], n) +1
            local _,n3 = string.find(EndString,[["worksInAtmosphere":]])
            local n4 = string.find(EndString,[[e]], n3) +1
            local m = self.SpecialRadarMode or self.RadarMode
            if Num2 ~= nil then EndString = string.sub(EndString,0,Num2 - 2) .. m .. " Scroll: " .. Scroll .. " / " .. max .. string.sub(EndString, Num2 - 1, n3) .. "false" ..  string.sub(EndString, n4, n) .. "false" .. string.sub(EndString, n2, #EndString) end
        
            Output = [[{"constructsList":[]] .. string.sub(Ships,0,#Ships -1) .. EndString
        
            s.updateData(Widgets.RadarDataID, Output)
        end
        
        self.RadarModes = {
            ["External"] = function(Data)
        		local targets = getPlugin("Targets",true)
                if targets ~= nil then
                    for _,v in pairs(targets) do 
                        local id = shortname:getId(v.shortid[1])
                        self:AddShip(id,Data)
                    end
        			unloadPlugin("Targets")
                end
            end,
            ["Verified"] = function(Data)
                local targets = radar.getIdentifiedConstructIds()
                for _,id in pairs(targets) do 
                    self:AddShip(id,Data, "searched - ",3)
                end
            end,
            ["Search"] = function(Data)
                local primary = 0
                if database.hasKey ~= nil then
                    if database.hasKey("Primary") == 1 then 
                        primary = database.getIntValue("Primary")
                        self:AddShip(primary, Data, "primary - ",1)
                    end
                end
        
                local SelTarget = radar.getTargetId()
                if SelTarget ~= 0 then
                    self:AddShip(SelTarget, Data, "selected - ",2)
                end
        
                local searchID = 0
                if self.tosearch ~= nil then
                    searchID = shortname:getId(self.tosearch)
                    if searchID ~= SelTarget then 
                        self:AddShip(searchID,Data, "searched - ",3)
                    end
                end
        
                for _,id in pairs(radar.getIdentifiedConstructIds()) do
                    if id == primary or id == SelTarget or id == searchID then goto skip end
                    self:AddShip(id, Data, "",5)
                    ::skip::
                end
            end,
        }
        
        function self:AddRadarMode(name,func)
            self.RadarModes[name] = func
        end
        settings:add("autoTrans","off",{"string",{"auto","Hyp","off"}},"if Transponder should auto Update","Transponder")
        function self:AutoTrans()
        	local fname = "Transponder"
            if settings:get("autoTrans",fname) == "auto" then
        		local transponders = getPlugin(fname,true,"",true)
                if transponders ~= nil then
        			local tablea = {}
        			local i = 1
        			for _,v in pairs(transponders) do
        				tablea[i] = v.transponder[1]
        				i = i + 1
        			end
        			transponder.setTags(tablea)
        			unloadPlugin(fname)
                end
            end
        end
        
        
        function self:setScreen()
            local HTML
            local w = weapon[1]
            local wmp,wop
            if w ~= nil then 
                wmp = w.getMaxDistance() / 400000
                wop = w.getOptimalDistance() / 400000
            end
            local rr = radar.getIdentifyRanges()[4] or 100000
            local rmp = rr / 400000
        
            if rmp > 1 then rmp = 1 end
            HTML = [[
                <head>
                    <style>
                        body {margin: 0}
                        svg {display:block; position:absolute; top:0; left:0} 
                    </style>
                </head>
                <body>
                <svg height="100%" width="100%" viewBox="0 0 1920 1080">
                <rect x="1898" y="333" rx="3" ry="3" width="26" height="670" style="fill:#4682B4;fill-opacity:0.35" />
        
                <rect x="1901" y="337" rx="3" ry="3" width="3" height="662" style="fill:#ffffff;fill-opacity:0.5" />
            ]]
            if wop ~= nil then
                HTML = HTML .. [[
                    <rect x="1903" y="]] .. round(337 + (1-wmp)*662)  .. [[" width="2" height="]] .. round((wmp-wop)*662) .. [[" style="fill:#ff0000;fill-opacity:0.8" />
                    <rect x="1903" y="]] .. round(337 + (1-wop)*662) .. [[" width="2" height="]] .. round(wop*662) .. [[" style="fill:#00ff00;fill-opacity:0.8" />
                    <rect x="1899" y="]] .. round(337 + (1-rmp)*662) .. [[" width="8" height="3" style="fill:#000000;fill-opacity:1" />]]
                for _,id in pairs(radar.getIdentifiedConstructIds()) do 
                    local d = radar.getConstructDistance(id) / 400000
                    HTML = HTML .. [[<text x="1904" y="]] .. round(337 + (1-d)*662) + 3 .. [[" font-family="Super Sans" text-anchor="start" style="fill:#000000;font-size:10px;stroke:#000000;stroke-width:1px">]].. shortname:getShortName(id) .. [[</text>]]
                end
                local id = radar.getTargetId() 
                if id > 0 then 
                    local d = radar.getConstructDistance(id) / 400000
                    HTML = HTML .. [[<text x="1904" y="]] .. round(337 + (1-d)*662) + 3 .. [[" font-family="Super Sans" text-anchor="start" style="fill:#ff00ff;font-size:10px;stroke:#000000;stroke-width:1px">]].. shortname:getShortName(id) .. [[</text>]]
                end
            end
            local o = 0
            if #weapon < 4 then
                o = 250
            end
            local function c(b) if b then return "00ff00" else return "ff0000" end end
            HTML = HTML .. [[
                <rect x="1530" y="]].. 567 + o ..[[" rx="3" ry="3" width="145" height="125" style="fill:#4682B4;fill-opacity:0.35" />
                <text x="1540" y="]].. 585 + o ..[[" font-family="Super Sans" text-anchor="start" style="fill:#ffffff;font-size:18px;stroke:#000000;stroke-width:1px">Type</text>
                <text x="1540" y="]].. 605 + o ..[[" font-family="Super Sans" text-anchor="start" style="fill:#]] .. c(settings:get(4,"Radar_Widget_Type")) .. [[;font-size:15px;stroke:#000000;stroke-width:1px">Static</text>
                <text x="1540" y="]].. 625 + o ..[[" font-family="Super Sans" text-anchor="start" style="fill:#]] .. c(settings:get(5,"Radar_Widget_Type")) .. [[;font-size:15px;stroke:#000000;stroke-width:1px">Dynamic</text>
                <text x="1540" y="]].. 645 + o ..[[" font-family="Super Sans" text-anchor="start" style="fill:#]] .. c(settings:get(6,"Radar_Widget_Type")) .. [[;font-size:15px;stroke:#000000;stroke-width:1px">Space</text>
                <text x="1540" y="]].. 665 + o ..[[" font-family="Super Sans" text-anchor="start" style="fill:#]] .. c(settings:get(7,"Radar_Widget_Type")) .. [[;font-size:15px;stroke:#000000;stroke-width:1px">Alien</text>
                <text x="1540" y="]].. 685 + o ..[[" font-family="Super Sans" text-anchor="start" style="fill:#]] .. c(settings:get("ShowDead","Radar_Widget")) .. [[;font-size:15px;stroke:#000000;stroke-width:1px">Dead</text>
                
                <text x="1620" y="]].. 585 + o ..[[" font-family="Super Sans" text-anchor="start" style="fill:#ffffff;font-size:18px;stroke:#000000;stroke-width:1px">Size</text>
                <text x="1620" y="]].. 605 + o ..[[" font-family="Super Sans" text-anchor="start" style="fill:#]] .. c(settings:get("XL","Radar_Widget_Size")) .. [[;font-size:15px;stroke:#000000;stroke-width:1px">XL</text>
                <text x="1620" y="]].. 625 + o ..[[" font-family="Super Sans" text-anchor="start" style="fill:#]] .. c(settings:get("L","Radar_Widget_Size")) .. [[;font-size:15px;stroke:#000000;stroke-width:1px">L</text>
                <text x="1620" y="]].. 645 + o ..[[" font-family="Super Sans" text-anchor="start" style="fill:#]] .. c(settings:get("M","Radar_Widget_Size")) .. [[;font-size:15px;stroke:#000000;stroke-width:1px">M</text>
                <text x="1620" y="]].. 665 + o ..[[" font-family="Super Sans" text-anchor="start" style="fill:#]] .. c(settings:get("S","Radar_Widget_Size")) .. [[;font-size:15px;stroke:#000000;stroke-width:1px">S</text>
                <text x="1620" y="]].. 685 + o ..[[" font-family="Super Sans" text-anchor="start" style="fill:#]] .. c(settings:get("XS","Radar_Widget_Size")) .. [[;font-size:15px;stroke:#000000;stroke-width:1px">XS</text>]]
            return HTML .. "</svg>"
        end
        return self
        
        end
        package.preload[packagePrefix.."settings"] = function()
           self = {}
        local config = getPlugin("config")
        
        self.version = 0.9
        self.loadPrio = 5
        self.Default = {}
        self.Range = {}
        self.Description = {}
        
        function self:add(name,Default,Range,Des,group)
            if name == nil or Default == nil then return "missing Infos" end
            Des = Des or ""
            group = group or "Standard" 
            if Range == nil or type(Range) ~= "table" then
                local t = type(Default)
                if t == "boolean" then
                    Range = {"boolean"}
                elseif t == "number" then
                    Range = {"number",1,10,1}
                else
                    return "missing Range Infos"
                end
            end
            if self.Default[group] == nil then self.Default[group] = {} self.Range[group] = {} self.Description[group] = {} end
            self.Default[group][name] = Default
            self.Range[group][name] = Range
            self.Description[group][name] = Des
        end
        
        function self:rem(name,group)
            group = group or "Standard"
            self.Default[group][name] = nil
            self.Range[group][name] = nil
            self.Description[group][name] = nil
        end
        function self:set(name,val,group)
            group = group or "Standard"
            local r = self.Range[group][name]
            local t = type(val)
            if r[1] ~= t then return end
            if t == "number" then
                val = utils.clamp(val,r[2],r[3])
                val = (val - r[2]) / r[4]
                val = round(val)
                val = val * r[4] + r[2]
            elseif t == "string" then
                if not inTable(r[2],val) then return end
            end
        	config:set(group..name,val,self.Default[group][name])
        end
        
        function self:get(name,group)
            group = group or "Standard"
        	return config:get(group..name, self.Default[group][name])
        end
        
        function self:register(env)
            _ENV = env
        end
        return self
        
        end
        package.preload[packagePrefix.."commandhandler"] = function()
           local self = {}
        local prefixList = {"/","!"}
        function self:register(env)
            _ENV = env
            if unitType == "gunner" then
                self.prefix = "/"
            elseif unitType == "remote" then
                self.prefix = "!"
            else
                self.prefix = "/"
            end
            CommandList = {
                {
                    [self.prefix] = {
                        {
                            ["help"] = function (input)
                                local str = input[2]
                                if str == nil then 
                                    for k,v in pairs(CommandList[1][self.prefix][2]) do
                                        print(k .. ":  " .. v)
                                    end
                                end
                            end,
                        },
                        {
                            ["help"] = "use this to list all commands",
                        }
                    },
                },
                {
                    [self.prefix] = "basic commands from the" .. unitType or "",
                }
            }
            local function commandhandler(oritext)
                text = string.lower(oritext)
                local prefix = string.sub(text,1,1)
                if prefix == self.prefix then  
                    local command = mysplit(string.sub(text,2,#text))
                    local a,error = pcall(CommandList[1][prefix][1][command[1]], command,oritext)
                    if not a then print(error) end
                elseif inTable(prefixList,prefix)  then
                
                elseif #text == 3 then
                    commandhandler("/t " .. text)
                else
                    if unitType == "gunner" then
                        print(oritext)
                    end
                end
            end
            register:addAction("systemOnInputText", "commandhandler", commandhandler)
        end
        self.version = 0.9
        self.loadPrio = 5
        
        function self:AddCommand(name,func,desc)
            CommandList[1][self.prefix][1][name] = func
            CommandList[1][self.prefix][2][name] = desc or ""
        end
        return self
        
        end
        package.preload[packagePrefix.."screener"] = function()
           -- Screener manages virtual screens on hud and real screen elements that are connected
        
        -- Fenster-Registrierung
        -- register:addScreen("ScreenName",offsetx,offsety,width,height,perspective) Position, Größe, Ansicht ("third"/"first"/"screen")
        
        -- View-Registrierung
        -- register:addView("Horizon",self)
        
        --function self:setScreen(screen)
        
        --optional:
        --function self:onMouseDown(x,y,button)
        --function self:onMouseUp(x,y,button)
        --function self:requireRerender(screen)
        
        --register
        --register:addButton(viewName,buttonName,x,y,width,height,func)
        
        -- local s = getPlugin("screener");
        -- s:addScreen(..
        
        local self = {}
        local setupMode = false
        local freeMouseMode = false
        self.loadPrio = 10
        local config = getPlugin("config")
        local screenDefault = {
            menuitmwidth= 1 / 8,
            menuitmheight= 1 / 16,
            offsetx=0,
            offsety=0,
            width=1 * (1/3),
            height=1 * (1/3),
            tag = "screen",
            totalWidth = system.getScreenHeight(), -- 1920,
            totalHeight = system.getScreenWidth(), --1080,
        	perspective = "third",
        	parent = "mainScreenThird",
        	mouseDown = false
        }
        local screenDef = {}
        
        function self:hotkeyState(hotkey)
            if self.pressedRegister[hotkey] == 1 then
                return 1
            end
            return 0
        end
        function self:startHotkeyPressed(hotkey)
            self.pressedRegister[hotkey] = 1
        end
        function self:endHotkeyPressed(hotkey)
            self.pressedRegister[hotkey] = nil
        end
        
        function self:freeMouse(freeOrNot)
        	if setupMode and freeOrNot then
        		print("setupMode off")
        		setupMode = false
        	end
        
        	freeMouseMode = freeOrNot
        	system.lockView(freeMouseMode)
        end
        function self:addButton(viewName,buttonName,x,y,width,height,func)
        
        end
        function self:addScreen(screenName,screenData)
        	curr = {}
            for key, val in pairs(screenDefault) do
        		if screenData[key] == nil then
        			curr[key] = val
        		else
        			curr[key] = screenData[key]
        		end
            end
        	curr["name"] = screenName
        	screenDef[screenName] = curr;
        end
        function self:getPerspectiveList()
        	return {"first","third"}
        end
        function self:getPerspective()
        	local persp = system.getCameraMode()
        	if persp == 1 then
        		return "first"
        	else
        		return "third"
        	end
        end
        
        local viewRegister = {}
        function self:addView(name, viewObj)
            assert(type(name) == "string", "name isn't a string, type was " .. type(name))
            assert(type(viewObj) == "table", name .. ": viewObj isn't a table, type was " .. type(viewObj))
        
            viewRegister[name] = viewObj
        
            register:callAction("registerAddView", name)
        end
        function self:removeView(name)
            if viewRegister[name] == nil then
                return false
            end
            viewRegister[name] = nil
        
            register:callAction("registerRemoveView", name)
        end
        function self:getViewList(viewTag)
            local keyset = {}
        
            for k, v in pairs(viewRegister) do
                if v == nil or v.viewTags == nil then
                    system.print("No view tags: '" .. (k))
                else
                    for _, tag in pairs(v.viewTags) do
                        if viewTag == nil or tag == viewTag then
                            table.insert(keyset, k)
                        end
                    end
                end
            end
            table.sort(keyset)
            return keyset
        end
        function self:renderView(name, screen, ...)
            if viewRegister[name] == nil then
                system.print("Render of view '" .. (name or "???") .. "' failed, because it there is no such view registered!","")
            end
            local viewObj = viewRegister[name]
        
            if viewObj.setScreen ~= nil then	
                local status, res = pcall(viewObj.setScreen, viewObj, screen, ...)
        
                if status then
                    return res
                else
                    system.print(name .." in setScreen:",res)
                    return nil
                end
            else
        		system.print(name .." render has no function 'setScreen'")
            end
        end
        function self:renderViewRequireRerender(name, screen, ...)
            if self.viewRegister[name] == nil then
                system.print("Rerender request of view '" .. (name or "???") .. "' failed, because it there is no such view registered!","")
            end
            local viewObj = viewRegister[name]
        
            if viewObj.requireRerender ~= nil then
                local status, res = pcall(viewObj.requireRerender, viewObj, screen, ...)
        
                if status then
                    return res
                else
                    system.print(name .." in renderViewRequireRerender:",res)
                    return nil
                end
            end
        
            return true
        end
        function self:actionToHtml(action, ...)
            local list, html = register:callAction(action, ...), ""
            for _, val in pairs(list) do
                if val then
                    html = html .. val
                end
            end
            return html
        end
        
        
        --local screenObjCache = {}
        function screenObj(name)
            --if screenObjCache[name] ~= nil then return screenObjCache[name] end
            --local screen = screenVals(name)
        
            --local config = getPlugin("config")
            --local playerId = unit.getMasterPlayerId()
            --local xval = config:get("xmax_"..playerId, 2560)
            --local yval = config:get("ymax_"..playerId, 1440)
        
            --screen.width = xval * screen.width
            --screen.height = yval * screen.height
            ---screen.offsetx = xval * screen.offsetx
            --screen.offsety = yval * screen.offsety
        
            --screen.menuitmwidth = math.floor(screen.width * screen.menuitmwidth)
            --screen.menuitmheight = math.floor(screen.height * screen.menuitmheight)
            --screenObjCache[name] = screen
            return screenDef[name]
        end
        
        local currMode = 0
        local colorRegister = {}
        function self:addColor(mode,hsl)
        	colorRegister[mode] = math.max(0, math.min(hsl,360))
        end
        function self:getColor(mode)
        	if colorRegister[mode] == nil then
        		if devMode then print("color for mode " .. mode .. " was not registered. Setting 290.") end
        		self:addColor(mode,290)
        	end
        	return colorRegister[mode]
        end
        function self:setColorMode(mode)
        	currMode = mode
        end
        local colorCache = {}
        function self:colors(mode)
        	if mode == nil then mode = currMode end
        	if colorCache[mode] == nil then
        		if colorRegister[mode] == nil then
        			if devMode then print("color for mode " .. mode .. " was not registered") end
        			self:addColor(mode,290)
        		end
        		local hsl = self:getColor(mode)
        		colorCache[mode] = {
        			hsl=hsl,
        			sqLeftHsl=hsl + 270.0,
        			sqTwoRight=hsl + 180.0,
        			warn=5
        		}
        		local colors = colorCache[mode]
        		if colors.sqLeftHsl > 360 then colors.sqLeftHsl = colors.sqLeftHsl - 360 end
        		if colors.sqTwoRight > 360 then colors.sqTwoRight = colors.sqTwoRight - 360 end
        
        		if colors.hsl < 45 or colors.hsl > 315 then colors.warn = colors.sqTwoRight end
        	end
        
        	return colorCache[mode]
        end
        function drawAllScreensCss()
            local colors = self:colors()
        	
            local css = [[
                                    * { font-family:Montserrat }
                                    body { margin: 0}
                                    svg {display:block; position:absolute; top:auto; left:auto}
                                    svg svg { overflow: visible }
                                    .screenSvg { position: relative; margin: auto 0; }
                                    .screen { margin:0; padding:0; position: absolute; left: 0; top: 0; border: 2px solid transparent }
        							.lfill { fill:hsl(]].. colors.hsl ..[[, 93.6%, 56.9%)}
                                    .sfill { fill:hsl(]].. colors.hsl ..[[, 100%, 50%) }
        							.lstroke { stroke:hsl(]].. colors.hsl ..[[, 93.6%, 56.9%)}
                                    .sstroke { stroke:hsl(]].. colors.hsl ..[[, 100%, 50%) }
        							.bstroke { stroke:black }
                                ]]
        
            if setupMode then
                css = css .. [[
        							.screen { border: 2px solid hsl(]].. colors.hsl ..[[, 93.6%, 56.9%) }
        							.menu { position: absolute; right: 0; top: 0; width: 100%; height: 3.125%; overflow: hidden; z-index: 1000 }
        							.mItm { z-index:inherit; background-color:hsl(]].. colors.hsl ..[[, 100%, 50%);position: relative; float: right; height: 100%; width: calc(100% / 24); border: 2px solid hsl(]].. colors.hsl ..[[, 93.6%, 56.9%); overflow: hidden; color: white;display: flex;align-items: center;justify-content: center; }
        						]]
            end
        
        	local persp = self:getPerspective()
            for name, _ in pairs(screenDef) do
        		screen = screenObj(name)
        		if persp == screen.perspective then
        			css = css .. [[
        								#]]..name..[[ { width: ]].. (screen.width * 100) ..[[%; height: ]].. (screen.height * 100) ..[[%; top: ]].. (screen.offsety * 100) ..[[%; left: ]].. (screen.offsetx * 100) ..[[% }
        			]]
        			if setupMode then
        				
        				css = css .. [[
        								#]]..name..[[ > .menu { height: ]].. (screen.menuitmheight * 100) ..[[% }
        								#]]..name..[[ > .menu .mItm { width: ]].. (screen.menuitmwidth * 100) ..[[% }
        				]]
        				for nr, viewName in pairs(self:getViewList(screen.tag)) do
        					local keyName = "scval_"..name.."_"..viewName
        					local curr = config:get(keyName, 0)
        					if curr == 1 then
        						css = css .. [[
        								#]]..name..[[ > .menu .mItm.n]]..nr..[[ { background-color:hsl(]].. colors.sqTwoRight ..[[, 100%, 50%) }
        						]]
        					end
        				end
        			end
        		end
            end
            return css
        end
        register:addAction("staticCssStyle","drawAllScreensCss",drawAllScreensCss)
        local drawCatche = {}
        function drawAllScreens()
            local altitude = 0
            --if core ~= nil then altitude = core.getAltitude() end
        
        	--[[
            lastMode = mode
            if forceMode == -1 then
                if altitude == 0 or altitude > 10000 then
                    mode = 1
                else
                    mode = 0
                end
            else
                mode = forceMode
            end
        
            if mode ~= lastMode then
                --showWidgets()
            end ]]--
            local addCss, menuRender, mouse = self:actionToHtml("staticCssStyle"), "", ""
        
        	local viewHudEntrys, innerScreens, mainScreens = {}, {}, {}
        	
        	local persp = self:getPerspective()
        	
        	if setupMode then	
                for nr, name in pairs(self:getViewList("screen")) do
                    menuRender = menuRender .. '<div class="mItm text n'.. nr ..'">'.. name .."</div>"
                end
        		menuRender = [[
        			<div class="menu screentag">
        				]]..menuRender..[[
        			</div>
        		]]
            end
        
        	for name, _ in pairs(screenDef) do
        		screen = screenObj(name)
        		--print(screen.perspective)
        		if persp == screen.perspective then
        			if screen.tag == "screen" then
        				if innerScreens[screen.parent] == nil then innerScreens[screen.parent] = "" end
        				
        				innerScreens[screen.parent] = innerScreens[screen.parent] .. [[
                                           <div id="]].. name ..[[" class="screen">
                                            ]].. menuRender .. [[
                                            ]].. self:actionToHtml(name .. "Html") ..[[
                                           </div>]]
        			end
        		end
        	end
        	if setupMode then
        		menuRender = ""
                for nr, name in pairs(self:getViewList("hud")) do
                    menuRender = menuRender .. '<div class="mItm text n'.. nr ..'">'.. name .."</div>"
                end
        		menuRender = [[
        			<div class="menu hudtag">
        				]]..menuRender..[[
        			</div>
        		]]
            end
        	for name, _ in pairs(screenDef) do
        		screen = screenObj(name)
        		
        		if persp == screen.perspective then
        			if screen.tag == "hud" then
        				--print("calling " ..name .. "Html"..persp)
        				if mainScreens[screen.parent] == nil then mainScreens[screen.parent] = "" end
        				if innerScreens[name] == nil then innerScreens[name] = "" end
        				mainScreens[screen.parent] = mainScreens[screen.parent] .. [[
        									   <div id="]].. name ..[[" class="screen">
        										]].. menuRender .. [[
        										]].. self:actionToHtml(name .. "Html") ..[[
        										]].. innerScreens[name]..[[
        									   </div>]]
        			end
        		end
        	end
        
        	local screenHtml = ""
        	if setupMode or freeMouseMode then
        		local mouseX = 	system.getMousePosX() / screenDefault.totalWidth
                local mouseY = 	system.getMousePosY() / screenDefault.totalHeight
        
                screenHtml = [[
        			<svg style="z-index: 10000;position: absolute;left:]]..(mouseX*100)..[[%;top:]]..(mouseY*100)..[[%" height="20px" width="20px" viewBox="0 0 512 512">
        				<path class="sfill bstroke" d="M434.214,344.448L92.881,3.115c-3.051-3.051-7.616-3.947-11.627-2.304c-3.989,1.643-6.592,5.547-6.592,9.856v490.667
        					c0,4.459,2.773,8.448,6.976,10.005c1.195,0.448,2.453,0.661,3.691,0.661c3.051,0,6.037-1.323,8.085-3.733l124.821-145.6h208.427
        					c4.309,0,8.213-2.603,9.856-6.592C438.182,352.085,437.265,347.52,434.214,344.448z"/>
        			</svg>
        			]]
        	end
        	
        	
        	for name, html in pairs(mainScreens) do
        		screenHtml = screenHtml .. html
        	end
        	
            local content = [[
                                    <head>
                                        <style>
                                            ]] .. addCss .. [[
                                        </style>
                                    </head>
                                    <body>
                                        ]].. screenHtml .. [[
                                    </body>
                                ]]
        	if devMode then
        		for _, screenUnit in pairs(screens) do
        			if screenUnit.getName() == "debugscreen" then
        				screenUnit.setHTML(content)
        			end
        		end
        	end
        
            if #screens > 0 then
                for sname, realScreen in pairs(screens) do
        			realScreen.mouseX = realScreen.getMouseX()
        			realScreen.mouseY = realScreen.getMouseY()
        			realScreen.mouseDown = realScreen.getMouseState() == 1
        
                    local name, newCode = "screen"..sname, nil
                    for _, viewName in pairs(self:getViewList("screen")) do
                        local totalViewName = name.."_"..viewName
                        local keyName = "scval_"..totalViewName
                        local curr = config:get(keyName, 0)
                        if curr == 1 then
                            if self:renderViewRequireRerender(viewName, realScreen) then
                                if newCode == nil then newCode = "" end
                                newCode = newCode .. self:renderView(viewName,realScreen)
                            end
                        end
                    end
                    if newCode ~= nil then
                        realScreen.setHTML(newCode)
                    end
                end
            end
            system.setScreen(content)
        end
        
        function self:triggerViewMouseEvent(up, name, screen, ...)
            if viewRegister[name] == nil then
                system.print("Render of view '" .. (name or "???") .. "' failed, because it there is no such view registered!","")
            end
            local viewObj = viewRegister[name]
        	local event = viewObj.onMouseUp
        	if up == false then
        		event = viewObj.onMouseDown
        	end
            if (event) then
                local status, res = pcall(event, viewObj, screen, ...)
        
                if status then
                    return res
                else
                    system.print(name ..": error in triggerViewMouseEvent:",up,res)
                    return nil
                end
            else
        
            end
        end
        function self:registerDefaultScreen(screenName,viewName)
        	local keyName = "scval_"..screenName.."_"..viewName
        	if devMode then print("registering default view " .. keyName) end
        	config:set(keyName, 1, 0)
        end
        function self:register(env)
            _ENV = env
        
        	self:addColor(0,120)
        	self:setColorMode(0)
            screenDefault.totalWidth = system.getScreenWidth()
            screenDefault.totalHeight = system.getScreenHeight()
        	local globalMouseDown = false
        	
            function setActionHtml(screenName,viewName)
                local screen = screenObj(screenName)
                local totalViewName = screenName.."_"..viewName
                local keyName = "scval_"..totalViewName
        		
        		local curr = config:get(keyName, 0)
        		if curr == 1 then
        			if devMode then print("register setActionHtml for " .. keyName) end
        			--print("adding "..screenName.."Html")
        			register:addAction(screenName.."Html",totalViewName.."Html", function()
        				if setupMode == false and freeMouseMode == false then
        					screen.mouseX, screen.mouseY, screen.mouseXPos, screen.mouseYPos = -1, -1, -1, -1
        					screen.mouseDown = false
        				else
        					screen.mouseXPos = system.getMousePosX() - screen.offsetx
        					screen.mouseYPos = system.getMousePosY() - screen.offsety
        					screen.mouseX = ((system.getMousePosX() / screenDefault.totalWidth) - screen.offsetx) / screen.width
        					screen.mouseY = ((system.getMousePosY() / screenDefault.totalHeight) - screen.offsety) / screen.height
        					screen.mouseDown = screen.mouseDown and globalMouseDown
        				end
        
        				--print("render " .. screenName.."Html".. "for " .. viewName .. " and total view " ..totalViewName)
        				return self:renderView(viewName,screen)
        			end)
        		else
        			register:removeAction(screenName.."Html",totalViewName.."Html")
        		end
        
            end
        	function realMouseEvent(up,screen,screenEntity, x, y)
        		local screenName = screen.name
        		for _, realScreen in pairs(screens) do
        			if realScreen.getId() == screenEntity.getId() then
        				realScreen.mouseX = realScreen.getMouseX()
        				realScreen.mouseY = realScreen.getMouseY()
        				realScreen.mouseDown = realScreen.getMouseState() == 1
        				for _, viewName in pairs(register:getViewList(screen.tag)) do
        					local totalViewName = screenName.."_"..viewName
        					local keyName = "scval_"..totalViewName
        					local curr = config:get(keyName, 0)
        
        					if curr == 1 then
        						self:triggerViewMouseEvent(up,viewName,realScreen)
        					end
        				end
        				return true
        			end
        		end
        		return false
        	end
        	function virtualMouseEvent(up,screen, clickxbase, clickybase, screenType)
        		local persp, screenName = self:getPerspective(), screen.name
        		local xvalwidth, yvalheight = screen.width, screen.height
        		local menuItemWidth = screen.menuitmwidth * screen.width
        		local menuItemHeight = screen.menuitmheight * screen.height
        		local clickx = clickxbase - screen.offsetx
        		local clicky = clickybase - screen.offsety
        		
        		
        		if clickx >= 0 and clickx < xvalwidth then
        			if clicky >= 0 and clicky < yvalheight then
        				screen.mouseXPos, screen.mouseYPos = clickx, clicky
        				screen.mouseX, screen.mouseY = clickx / xvalwidth, clicky / yvalheight
        				if debug then
        					print("clickx "..clickx.." to "..xvalwidth.." results in "..clickx / xvalwidth)
        				end
        				screen.mouseDown = not up
        				-- height of menu
        				if not freeMouseMode and clicky < menuItemHeight then
        					if up then
        						for index, viewName in pairs(self:getViewList(screen.tag)) do
        
        							local offset, preOffset = index*menuItemWidth,(index-1)*menuItemWidth
        
        							if clickx > (xvalwidth - offset) and clickx <= (xvalwidth - preOffset) then
        								local totalViewName = screenName.."_"..viewName
        								local keyName = "scval_"..totalViewName
        								local curr = config:get(keyName, 0)
        								if curr == 1 then
        									config:set(keyName, 0, 0)
        								else
        									config:set(keyName, 1, 0)
        								end
        								setActionHtml(screenName,viewName)
        							end
        						end
        					end
        				else
        					for _, viewName in pairs(self:getViewList(screen.tag)) do
        						local totalViewName = screenName.."_"..viewName
        						local keyName = "scval_"..totalViewName
        						local curr = config:get(keyName, 0)
        						if curr == 1 then
        							self:triggerViewMouseEvent(up, viewName,screen)
        						end
        					end
        				end
        				
        				if devMode then
        					local event = "DOWN"
        					if up then event = "UP" end
        					-- In screen
        					print("Event "..event.."Screen " .. screenName  .. " Type " .. screenType .. " Relative x " .. clickx .. " Relative y " .. clicky)
        				end
        
        				return true
        			end
        		end
        		return false
        	end
        	function tableLength(T)
        		assert(type(T) == 'table', 'bad parameter #1: must be table')
        		local count = 0
        		for _ in pairs(T) do count = count + 1 end
        		return count
        	end
            function initAllScreens()
                screenObjCache = {} -- empty cache
                if devMode then print("reinitialize all "..tableLength(screenDef).." screens") end
        		
                for name, _ in pairs(screenDef) do
        			
                    local screen = screenObj(name)
        			
                    for _, viewName in pairs(self:getViewList(screen.tag)) do
                        setActionHtml(name,viewName)
                    end
        
                    register:addAction("screenMouseUp","realScreenMouseUp"..name,
        				function(screenEntity, x, y)
                            realMouseEvent(true,screen,screenEntity, x, y)
        				end
                    )
        			register:addAction("screenMouseDown","realScreenMouseUp"..name,
        				function(screenEntity, x, y)
                            realMouseEvent(false,screen,screenEntity, x, y)
        				end
                    )
                    register:addAction("mouseUp","screenMouseUp"..name,
        				function(clickxbase, clickybase, screenType)
        					if self:getPerspective() == screen.perspective then
        						virtualMouseEvent(true,screen,clickxbase, clickybase, screenType)
        					end
        				end
                    )
        			register:addAction("mouseDown","screenMouseDown"..name,
        				function(clickxbase, clickybase, screenType)
        					if self:getPerspective() == screen.perspective then
        						virtualMouseEvent(false,screen,clickxbase, clickybase, screenType)
        					end
        				end
                    )
                end 
            end
        	self:addScreen("mainScreenFirst",{
                menuitmwidth= 1 / 24,
                menuitmheight= 1 / 32,
                width=1,
                height=1,
                tag = "hud",
        		perspective="first"
            });
        	self:addScreen("mainScreenThird",{
                menuitmwidth= 1 / 24,
                menuitmheight= 1 / 32,
                width=1,
                height=1,
                tag = "hud"
            });
        	self:addScreen("screen1first",{
                offsetx=0,
        		perspective="first",
        		parent="mainScreenFirst"
            });
        	self:addScreen("screen1third",{
                offsetx=0
            });
        	self:addScreen("screen2first",{
                offsetx=0,
                offsety=1 * (1/3),
        		perspective="first",
        		parent="mainScreenFirst"
            });
        	self:addScreen("screen2third",{
                offsetx=0,
                offsety=1 * (1/3)
            });
        	self:addScreen("screen3first",{
                offsetx=1 * 0.63,
                offsety=1 * 0.25,
                width=1 * 0.23,
                height=1 * 0.23,
        		perspective="first",
        		parent="mainScreenFirst"
            });
        	self:addScreen("screen3third",{
                offsetx=1 * 0.63,
                offsety=1 * 0.25,
                width=1 * 0.23,
                height=1 * 0.23
            });
        	self:addScreen("screen4first",{
                offsetx=1 * 0.56,
                offsety=0,
                width=1 * 0.20,
                height=1 * 0.25,
        		perspective="first",
        		parent="mainScreenFirst"
            });
        	self:addScreen("screen4third",{
                offsetx=1 * 0.56,
                offsety=0,
                width=1 * 0.20,
                height=1 * 0.25
            });
        
        	
            --register:addAction("staticCssStyle","drawAllScreensCss",drawAllScreensCss)
            register:addAction("registerAddView", "viewRegisterWatcher", initAllScreens)
            initAllScreens()
            register:addAction("unitOnStart","Screener", function()
                register:addAction("systemOnUpdate","drawAllScreens",
                        function()
                            if (executeTotal == 1 or executeTotal%renderEveryXFrames==0) or setupMode or freeMouseMode then
        						if screenToggle then drawAllScreens() end
                                --timeit("update", drawAllScreens)
                                --local status, err = pcall(drawAllScreens)
                                --if not status then
                                --    system.print("Error: "..err)
                                --end
                            end
                        end
                )
        		
                register:addAction("leftmouseStart","mouseStartTracker",
                        function()
        					globalMouseDown = true
                            if setupMode or freeMouseMode then
                                local mouseX = 	system.getMousePosX() / screenDefault.totalWidth
                                local mouseY = 	system.getMousePosY() / screenDefault.totalHeight
                                register:callAction("mouseDown",mouseX,mouseY,"hud")
                                return true
                            else
                                return false
                            end
                        end
                )
                register:addAction("leftmouseStop","mouseStopTracker",
                        function()
        					globalMouseDown = false
                            if setupMode or freeMouseMode then
                                local mouseX = 	system.getMousePosX() / screenDefault.totalWidth
                                local mouseY = 	system.getMousePosY() / screenDefault.totalHeight
                                register:callAction("mouseUp",mouseX,mouseY,"hud")
                                return true
                            else
                                return false
                            end
                        end
                )
        		
                --register:addAction("unitStop", "multiscreenStopInterface",hideWidgets)
            end)
        	local cmd = getPlugin("commandhandler")
        	cmd:AddCommand("setup",
        		function(prompt)
        			setupMode = not setupMode
        			if setupMode then
        				system.lockView(true)
        				print("setupMode on")
        			else
        				system.lockView(false)
        				print("setupMode off")
        			end
        		end,
        		"Activate/Deactivate screener setup mode"
        	)
        	local free = false
        	cmd:AddCommand("mouse",
        		function(prompt)
        			free = not free
        			self:freeMouse(free)
        			if free then
        				print("mouse on")
        			else
        				print("mouse off")
        			end
        		end,
        		"Mouse on/off"
        	)
        	local set = getPlugin("settings")
        	set:add("FPS",3,{"number",1,10,1},"RefreshRate")
        	renderEveryXFrames = set:get("FPS") or 3
        end
        return self
        end
        package.preload[packagePrefix.."slots"] = function()
           -- Slots is controlling all connected elements
        local self = {}
        self.slots = nil
        local buildIn = {control=true,library=true,system=true,unit=true,player=true,construct=true} -- Could be list, but quicker access times and easier to use indexed
        
        function self:calcSlots()
            self.slots={}
            local target = unit or {}
            for key, value in pairs(target) do
                if buildIn[key] == nil then
                    if type(key) == "string" and type(value) == "table" and type(value.export) == "table" then
                        self.slots[key] = value
                    end
                end
            end
            return self.slots
        end
        function self:getSlots()
            if self.slots == nil then
                self:calcSlots()
            end
            return self.slots
        end
        
        self.elementsIdList = nil
        function self:calcElementList()
            if core == nil then return end
            self.elementsIdList = core.getElementIdList()
        end
        function self:getElementList()
            if self.elementsIdList == nil then
                self:calcElementList()
            end
            return self.elementsIdList
        end
        
        -- First 5 letters of name
        local unitTypeClass = {
        	RemoteControlUnit = "remote", CockpitHovercraftUnit = "command", PVPSeatUnit = "gunner" , CockpitCommandmentUnit = "command", CockpitFighterUnit = "command"
        }
        local slotSubClass = {
        	Weapo = "weapon", Shiel = "shield", Radar = "radar" , CoreU = "core", Stasi = "weapon",
        }
        local slotClasses = {
            AntiGravityGeneratorUnit="antigrav",WarpDriveUnit="warpdrive",DataBankUnit="databases",
            ReceiverUnit = "receiver",EmitterUnit="emitter",ScreenUnit="screens",CombatDefense="transponder",
            AtmoFuelContainer = "atmofueltank",SpaceFuelContainer = "spacefueltank",RocketFuelContainer = "rocketfueltank",CounterUnit="counter",laserDetector="laser",
            SpaceEngine = "engine"
        }
        local slotLists = {
            weapon=true,databases=true,screens=true,atmofueltank=true,spacefueltank=true,rocketfueltank=true,radar=true,engine=true
        }
        local eventRegister = {
          core = {"onStressChanged(stress)"},
          container = {"onContentUpdate()"},
          industry = {"onStarted(id,quantity)", "onCompleted(id,quantity)", "onStatusChanged(status)","onBankUpdate()"},
          radar = {"onEnter(id)","onLeave(id)","onIdentified(id)"},
          screens = {"mouseDown(x,y)", "mouseUp(x,y)", "onOutputChanged(output)"},
          laser = { "onHit()", "onLoss()" },
          receiver = {"onReceived(channel,message)"},
          shield = {"onToggled(active)","onAbsorbed(hitpoints,rawHitpoints)","onVentin(active,restoredHitpoints)","onDown()","onRestored()"},
          weapon = { "onReload(ammoId)", "onReloaded(ammoId)", "onMissed(targetId)", "onDestroyed(targetId)", "onElementDestroyed(targetId,itemId)", "onHit(targetId,damage)"},
        
          -- abstract
          --enterable =  { "enter(id)", "leave(id)"},
          --pressable =  { "pressed()", "released()"},
        
          -- built-in
          --control = { "onStop()", "onTimer(tag)"},
          --system = { "onActionStart(action)", "onActionStop(action)", "onActionLoop(action)", "onUpdate()", "onFlush()", "onInputText(text)"},
          --player = { "onParentChanged(oldId,newId)"},
          --construct = { "onDocked(id)", "onUndocked(id)", "onPlayerBoarded(id)", "onVRStationEntered(id)", "onConstructDocked(id)", "onPvPTimer(active)"}
        }
        
        local function getArgsForFilter (filterSignature)
            for k,v in ipairs(filterSignature) do
                local funName, funArgs = v:match("^([^(]+)%((.*)%)")
            
                local argNames = {}
                for argName in funArgs:gmatch("[^%s,]+") do table.insert(argNames, argName) end
                for _,g in ipairs(argNames) do
                    print(string.format("* Slot name %q has options %q.", funName, g))
                end
                local mappedArgs = map(argNames, function () return "*" end)
                for _,g in ipairs(mappedArgs) do
                    print(string.format("* Slot name %q has options %q.", funName, g))
                end
        		
        		
            end
        end
        function self:getClassType(class)
        	local type
        	if slotClasses[class] ~= nil then
        		type = slotClasses[class]
        	else
        		local c = string.sub(class,0,5)
        		if slotSubClass[c] ~= nil then
        			type = slotSubClass[c]
        		end
        	end
        	--if type == nil then
        		--system.print("Unrecognized Type: "..class)
        	--end
        	return type
        end
        function self:register(env)
            _ENV = env
        
            for type, _ in pairs(slotLists) do
                _ENV[type] = {}
            end
            for _, slotElement in pairs(self:getSlots()) do
                local class = slotElement.getClass()
        		local type = self:getClassType(class)
        		
        		if type == nil then
        			system.print("Unrecognized Type: "..class)
        		else
        			if slotLists[type] == nil then
                        _ENV[type] = slotElement
                    else
                        table.insert(_ENV[type], slotElement)
                    end
        		end
            end
        
            function compare(a, b)
                if a ~= nil and a.getLocalId and b ~= nil and b.getLocalId then
                    return a.getLocalId() < b.getLocalId()
                end
                return nil
            end
            for type, _ in pairs(slotLists) do
                if #_ENV[type] > 1 then table.sort(_ENV[type],compare) end
            end
        
            if #_ENV["databases"] > 0 then
                local bankraid = getPlugin("bankraid",true)
                if bankraid ~= nil then
                    _ENV["database"] = bankraid:new(_ENV["databases"])
                else
                    _ENV["database"] = _ENV["databases"][1]
                end
            end
        
        	if _ENV["unitType"] == nil or _ENV["unitType"] == "" then
        		if unitTypeClass[unit.getClass()] ~= nil then
        			_ENV["unitType"] = unitTypeClass[unit.getClass()]
        		else
        			--print("Unrecognized unitTypeClass: "..unit.getClass())
        		end
        	end
        	
            register:addAction("antigravityStart", "antigravityStart", function()
                if antigrav ~= nil then
                    antigrav.toggle()
                end
            end)
        
            register:addAction("systemOnUpdate", "frameCounter",
                    function()
                        if executeTotal == nil then executeTotal = 0 end
                        if executeSet == nil then executeSet = 0 end
        
                        executeTotal = executeTotal + 1
                        executeSet = executeSet + 1
                        local currTime = system.getArkTime()
                        if (currTime - executeTime) > 1 then
                            executeLastFrames = executeSet
                            executeSet = 1
                            executeTime = currTime
                            local showFrames = false --export: Will show current frames in console only
                            if showFrames then
                                system.print("Frames: " .. executeLastFrames)
                            end
                        end
                    end
            )
            register:addAction("systemOnActionStart", "systemActionStartAlias",
                    function(action, system)
                        register:callAction(action .. "Start", system)
        				register:startHotkeyPressed(action)
                    end
            )
            register:addAction("systemOnActionStop", "systemActionStopAlias",
                    function(action, system)
                        register:callAction(action .. "Stop", system)
        				register:endHotkeyPressed(action)
                    end
            )
            register:addAction("systemOnActionLoop", "systemActionLoopAlias",
                    function(action, system)
                        register:callAction(action .. "Loop", system)
                    end
            )
        end
        return self
        end
        package.preload[packagePrefix.."register"] = function()
           -- Register is handling all event registrations
        local self = {}
        self.functionRegister = {}
        self.overwriteRegister = {}
        self.overwriteOrder = {}
        self.viewRegister = {} -- collection of all views
        self.pressedRegister = {} -- collection of all currently pressed keys. For performance reasons, only use this for events, not ship movement!
        
        function self:hotkeyState(hotkey)
            if self.pressedRegister[hotkey] == 1 then
                return 1
            end
            return 0
        end
        function self:startHotkeyPressed(hotkey)
            self.pressedRegister[hotkey] = 1
        end
        function self:endHotkeyPressed(hotkey)
            self.pressedRegister[hotkey] = nil
        end
        
        -- Switches are functions that can be activated or deactivated
        -- the property "buttonName" and functions like "activate", "deactivate" and "isActive" should be part of the entity passed
        self.switches = {}
        function self:addSwitch(name, entity)
            assert(type(name) == "string", "name isn't a string, type was " .. type(name))
            assert(type(entity) == "table", name .. ": entity isn't a table, type was " .. type(entity))
        
            self.switches[name] = entity
        
            self:callAction("registerAddSwitch", name)
        end
        function self:getSwitch(name)
            assert(type(name) == "string", "name isn't a string, type was " .. type(name))
            return self.switches[name]
        end
        function self:getSwitches()
            return self.switches
        end
        
        self.taskRegister = { }
        self.taskOrder = {}
        local function compareTasks(a, b)
            if a ~= nil and b ~= nil then
                return self.taskRegister[a].order < self.taskRegister[b].order
            end
            return nil
        end
        --[[Adds a task that will be done one step (yield) every frame,
            if there is not a task with lower or same priority number before that.
            Tasks with a lot of yield and unset "rating" that run for a very long time may block important tasks.
            "rating" is the amount of power, in relation the total cpu cycles, a task takes.
            At the time of adding this rating, you could execute about 3500 commands before cpu overload.]]--
        local taskMaxRating = 2500
        function self:addTask(name, func, priority, rating)
            assert(type(name) == "string", "addTask: name isn't a string, type was " .. type(name))
            assert(type(func) == "function", name .. ": func isn't a function, type was " .. type(func))
            if priority == nil then
                priority = 10
            else
                assert(type(priority) == "number" ,  name .. ": priority has to be number, type was " .. type(priority))
            end
        
            if rating == nil then
                rating = taskMaxRating
            else
                assert(type(rating) == "number" ,  name .. ": rating has to be number, type was " .. type(rating))
                assert(rating <= taskMaxRating ,  name .. ": rating has to be smaller then the allowed max rating of " .. taskMaxRating)
            end
        
            if not self:hasAction("systemUpdate","registerTasker") then
                self:addAction("systemUpdate","registerTasker",function() self:runTasks() end)
            end
        
            if self.taskRegister[name] ~= nil then self:removeTask(name) end
        
            table.insert(self.taskOrder, name)
            self.taskRegister[name] = {order=priority,task=coroutine.create(func),rating=rating}
        
            if #self.taskOrder > 1 then table.sort(self.taskOrder,compareTasks) end
        end
        function self:hasTask(name)
            return self.taskRegister[name] ~= nil
        end
        function self:removeTask(name)
            assert(type(name) == "string", "removeTask: Name isn't a string, type was " .. type(name))
        
            self.taskRegister[name] = nil
            for k,v in pairs(self.taskOrder) do
                if v == name then
                    table.remove(self.taskOrder,k)
                    return
                end
            end
        end
        function self:runTasks()
            local currTasksRating = 0
            for _, name in ipairs(self.taskOrder) do
                local regTask = self.taskRegister[name]
        
                if (currTasksRating + regTask.rating) <=  taskMaxRating then
                    if regTask.task == nil or coroutine.status(regTask.task) == "dead" then
                        self:removeTask(name)
                    else
                        currTasksRating = currTasksRating + regTask.rating
                        local ok, errorMsg = coroutine.resume(regTask.task)
                        if not ok then
                            system.print(name .." in runTasks:",errorMsg)
                            self:removeTask(name)
                        end
                    end
                end
            end
        end
        
        function self:hasAction(action,name)
            return self.functionRegister[action] ~= nil and self.functionRegister[action][name] ~= nil
        end
        function self:addAction(action, name, func)
            assert(type(action) == "string", "action isn't a string, type was " .. type(action))
            assert(type(name) == "string", action .. ": name isn't a string, type was " .. type(name))
            assert(type(func) == "function", action .. ":" .. name .. ": func isn't a function, type was " .. type(func))
        
            if self.functionRegister[action] == nil then
                self.functionRegister[action] = {}
            end
            self.functionRegister[action][name] = func
        end
        function self:removeAction(action, name)
            if self.functionRegister[action] == nil or self.functionRegister[action][name] == nil then
                return false
            end
            self.functionRegister[action][name] = nil
            return true
        end
        function self:callAction(action, ...)
            local results = {}
            if self.functionRegister[action] ~= nil then
                for name, func in pairs(self.functionRegister[action]) do
                    if func ~= nil then
                        local status, res = pcall(func, ...)
                        if status then
                            results[name] = res
                        else
                            system.print(name .." in callAction:",res)
                        end
                    end
                end
            end
            return results
        end
        function self:callActionSpecific(action, name, ...)
        	assert(self.functionRegister[action] == "table", action .. ":" .. " not registered")
        	assert(self.functionRegister[action][name] == "function", action .. ":" .. name .. ": called specified function isn't a function, type was " .. type(self.functionRegister[action][name]))
        	
        	local status, res = pcall(self.functionRegister[action][name], ...)
        	if status then
        		return res
        	else
        		system.print(name .." in callActionSpecific:",res)
        	end
        end
        return self
        end
        system.rawPrint = system.print
        function system.print(msg,err)
            if err then
                err = tostring(err):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
            else
                err = "???"
            end
            system.rawPrint(msg .. " ".. err)
        end
        function print(str)
            system.rawPrint(tostring(str))
        end
        local u = unit
        if devMode == true and player.hasDRMAutorization() ~= 1 then print("devMode set but no DRM auth") error("devMode set but no DRM auth") u.exit() end
        if u.hasDRM() == 0 then if devMode ~= true then print("DRM Required") error("DRM Required") u.exit() else print("DRM requirement skipped by devMode") end end
        u.hideWidget()
        print("Hyperion Gunner Script V0.98.2")
        print("by Hyperion Scripting")
        
        system.showScreen(1) ---Start Screen
        system.setScreen([[<svg xmlns="http://www.w3.org/2000/svg" width="40%" style="left:30%;top:10%;display:block; position:absolute;" viewBox="0 0 973.35 837.57">
            <defs>
            <style>
            .cls-1 { fill: #798a99; }
            .cls-2 { fill: #bd1730; }
            </style>
            </defs>
            <path class="cls-1" d="M583,93.5H437.52C353.65,361.21,211.41,603.08,25.7,804.26L98.3,930a1892.42,1892.42,0,0,1,828.89-.22l70.63-122.29C810.63,605.68,667.33,362.63,583,93.5ZM508.29,740.05A945,945,0,0,0,206.5,789.18C357.22,655.35,464.94,474.16,506.32,269c41.16,204.15,148,384.54,297.51,518.13A945.66,945.66,0,0,0,508.29,740.05Z" transform="translate(-25.08 -93)"/>
            <circle class="cls-2" cx="481.42" cy="523.5" r="118"/>
            </svg>
            <svg height="100%" width="100%" viewBox="0 0 1920 1080" style="left:0;top:0;display:block; position:absolute;">
            <text x="40%" y="88%" style="fill:#FFFFFF;font-size:50px">Hyperion Scripting</text>
            </svg>]])
        
        local realRequire = require
        require = function(name) return print("require '" .. name.. "': deprecated, use getPlugin()") end 
        local plugins = {}
        local pluginCache = {}
        function plugins:fixName(name)
            local pp = packagePrefix
            if string.find(name, pp) then
                name = string.gsub(name, pp, "")
            end
        	return name
        end
        
        function plugins:unloadPlugin(name,noPrefix,key)
        	assert(type(name) == "string", "getPlugin: parameter name has to be string, was " .. type(name))
        	name = plugins:fixName(name)
            local pp = packagePrefix
            if type(pluginCache[name]) == "table" and pluginCache[name].valid ~= nil then
                if pluginCache[name]:valid(key) ~= true then
                    return nil
                end
            end
        	if noPrefix then pp = "" end
        	if package.loaded ~= nil and package.loaded[pp..name] ~= nil then
        		package.loaded[pp..name] = nil
        	end
        	if pluginCache[name] ~= nil then
        		if type(pluginCache[name]) == "table" and type(pluginCache[name].unregister) == "function" then
        			pluginCache[name].unregister()
        		end
        		pluginCache[name] = nil
        	end
        end
        -- optional key, will checked on function "valid" before returning plugin if it exist, otherwise defaults to return plugin
        function plugins:getPlugin(name,noError,key,noPrefix)
            assert(type(name) == "string", "getPlugin: parameter name has to be string, was " .. type(name))
            if noError == nil then noError = false end
        	name = plugins:fixName(name)
        	
            if not plugins:hasPlugin(name,noError,noPrefix) then return nil end
        
            if type(pluginCache[name]) == "table" and pluginCache[name].valid ~= nil then
                if pluginCache[name]:valid(key) ~= true then
                    if not noError then print("getPlugin '"..name.."':".." Not valid or compatible") end
                    return nil
                end
            end
        
            return pluginCache[name]
        end
        function plugins:hasPlugin(name,noError,noPrefix)
            assert(type(name) == "string", "hasPlugin: parameter name has to be string, was " .. type(name))
            if noError == nil then noError = false end
            name = plugins:fixName(name)
            local pp = packagePrefix
        	if noPrefix then pp = "" end
        	
            if pluginCache[name] == nil then
        		pluginCache[name] = false
        
        		if (player.hasDRMAutorization() == 1  or package.preload[pp..name] ~= nil) or noPrefix then
                    local ok, res = pcall(realRequire, pp..name)
        			if not ok then
        				if noError == nil or not noError then
        					system.print("hasPlugin '"..name.."': require failed",res)
        				end
        			else
        				pluginCache[name] = res
        			end
        		else
        			print("hasPlugin '"..name.."': DRM auth required to load external files")
        		end
        
                if type(pluginCache[name]) == "table" then
                    if pluginCache[name].register ~= nil then
                        if _ENV["debugscreen"] == nil then _ENV["debugscreen"] = debugscreen end
                        if _ENV["register"] == nil then _ENV["register"] = register end
                        if _ENV["system"] == nil then _ENV["system"] = system end
                        if _ENV["unit"] == nil then _ENV["unit"] = unit end
        				if _ENV["player"] == nil then _ENV["player"] = player end
                        if _ENV["construct"] == nil then _ENV["construct"] = construct end
                        if _ENV["library"] == nil then _ENV["library"] = library end
                        local ok2, res2 = pcall(pluginCache[name].register,pluginCache[name],_ENV)
                        if not ok2 and not noError then
                            system.print("hasPlugin '"..name.."': register failed",res2)
                        end
                    end
                else
                    if pluginCache[name] ~= nil and pluginCache[name] ~= false then
        				if type(pluginCache[name]) == "string" then 
        					print("hasPlugin '"..name.."':"..pluginCache[name])
        				else
        					print("hasPlugin '"..name.."': not table value")
        				end
                        
                    end
                end
            end
            return type(pluginCache[name]) == "table"
        end
        function unloadPlugin(name,noPrefix) return plugins:unloadPlugin(name,noPrefix) end
        function hasPlugin(name,noError,noPrefix) return plugins:hasPlugin(name,noError,noPrefix) end
        function getPlugin(name,noError,key,noPrefix) return plugins:getPlugin(name,noError,key,noPrefix) end
        local errorStack = {}
        
        -- NEEDS to be the FIRST initialized module! Register is the only implicit dependency
        unitType = ""  --export: Set behaviour type of element
        renderEveryXFrames = 3 --export: Reduces the framerate of the interface.<br>Higher values will save more performance
        executeTotal = 0
        executeSet = 0
        executeTime = 0
        executeLastFrames = 0
        screenToggle = true
        mode = -1
        forceMode = -1
        
        bootTime = system.getArkTime()
        
        useLightStyle = false --export: Light style reduces the interface to digital numbers and indicators
        
        local mode1Color = 120 --export: Base color of interface<br>Range: 0-360<br>Try 120, 184 or 334. Can be any other number in range.
        local mode2Color = 184 --export: Space color of interface<br>Range: 0-360<br>Try 120, 184 or 334. Can be any other number in range.
        
        modeColors = {}
        modeColors[0] = mode1Color
        modeColors[1] = mode2Color
        
        fuelTankHandlingSpace = 5 --export:
        fuelTankHandlingRocket = 0 --export:
        fuelTankHandlingAtmos = 0 --export:
        ContainerOptimization = 5 --export:
        FuelTankOptimization = 5 --export:
        
        function collect_keys(t, sort)
            local _k = {}
            for k in pairs(t) do
                _k[#_k+1] = k
            end
            table.sort(_k, sort)
            return _k
        end
        function sortedPairs(t, sort)
            local keys = collect_keys(t, sort)
            local i = 0
            return function()
                i = i+1
                if keys[i] then
                    return keys[i], t[keys[i]]
                end
            end
        end
        function tableLength(T)
            local count = 0
            for _ in pairs(T) do count = count + 1 end
            return count
        end
        -- END orderedPairs functions
        
        function timeit(title, f)
            collectgarbage()
            local startTime = system.getTime()
            local result = f()
            local endTime = system.getTime()
            print( title .. ": " .. (endTime - startTime) )
            return result
        end
        function getRelativePitch(velocity)
            return math.deg(math.atan(velocity[2], velocity[3])) - 90
        end
        function getRelativeYaw(velocity)
            return math.deg(math.atan(velocity[2], velocity[1])) - 90
        end
        function mysplit(inputstr, sep)
            if sep == nil then sep = "%s" end
            local t={}
            for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
                table.insert(t, str)
            end
            return t
        end
        function inTable(tab, val)
            if type(tab) ~= "table" then return false end
            for k,v in pairs(tab) do
                if v == val then return true,k end
            end
            return false
        end
        function round(num, numDecimalPlaces)
            local mult = 10 ^ (numDecimalPlaces or 0)
            if numDecimalPlaces ~= nil then
                return math.floor(num * mult + 0.5) / mult
            else
                return math.floor((num * mult + 0.5) / mult)
            end
        end
        if not inTable(player.getOrgIds(),2041) then system.print("Corp signatur required") error("Corp signatur required") u.exit() end
        if not construct.getCreator()[1] == 17654 then system.print("Corp creater required") error("Corp creater required") u.exit() end
        register = getPlugin("register")
        slots = getPlugin("slots")
        -- Simulate system start
        register:callAction("systemStart")
        
        --easier time with timers
        local Timer = {}
        function addTimer(ID, time, callback)
            u.setTimer(ID, time)
            Timer[ID] = callback
        end
        
        function onTimer(timerId)
            if Timer[timerId] ~= nil then
                local a,b = pcall(Timer[timerId])
                if not a then print("Timer:" .. b .. "  " .. timerId) end
            end
        end
        
        function stopTimer()
            for k,_ in pairs(Timer) do
                u.setTimer(k,0)
            end
        end
        local DelayCounter = 0
        function delay(func, time)
            local ID = "DelayCounter".. DelayCounter
            addTimer(ID, time, function() pcall(func) u.stopTimer(ID) end)
            DelayCounter = DelayCounter + 1
        end
        register:addAction("unitOnTimer", "Timer", onTimer) 
        
        -- Load all registrations from all packages. Will be late init
        if devMode == true then
        	getPlugin("dev", true)
        	getPlugin("devTools", true)
        end
        getPlugin("optionals", true)
        
        for name,_ in sortedPairs(package.preload) do
        	getPlugin(name,true)
        end
        
        delay(function() register:callAction("unitOnStart") system.setScreen("") end, 0.5)
        
    onStop:
      lua: if register ~= nil then register:callAction("unitOnStop",unit) end
    onTimer(tag):
      lua: if register ~= nil then register:callAction("unitOnTimer",tag,unit) end
  system:
    onActionStart(action):
      lua: if register ~= nil then register:callAction("systemOnActionStart",action,system) end
    onActionStop(action):
      lua: if register ~= nil then register:callAction("systemOnActionStop",action,system) end
    onActionLoop(action):
      lua: if register ~= nil then register:callAction("systemOnActionLoop",action,system) end
    onUpdate:
      lua: if register ~= nil then register:callAction("systemOnUpdate",system) end
    onFlush:
      lua: if register ~= nil then register:callAction("systemOnFlush",system) end
    onInputText(text):
      lua: if register ~= nil then register:callAction("systemOnInputText",text,system) end
    onCameraChanged(mode):
      lua: if register ~= nil then register:callAction("systemOnCameraChanged",mode,system) end
  transponder:
    onEnter(id):
      lua: if register ~= nil then register:callAction("OnEnter",id,transponder) end
    onLeave(id):
      lua: if register ~= nil then register:callAction("OnLeave",id,transponder) end
    onIdentified(id):
      lua: if register ~= nil then register:callAction("OnIdentified",id,transponder) end
  weapon_1:
    onReload(ammoId):
      lua: if register ~= nil then register:callAction("OnReload",ammoId,weapon_1) end
    onReloaded(ammoId):
      lua: if register ~= nil then register:callAction("OnReloaded",ammoId,weapon_1) end
    onMissed(targetId):
      lua: if register ~= nil then register:callAction("OnMissed",targetId,weapon_1) end
    onDestroyed(targetId):
      lua: if register ~= nil then register:callAction("OnDestroyed",targetId,weapon_1) end
    onElementDestroyed(targetId,itemId):
      lua: if register ~= nil then register:callAction("OnElementDestroyed",targetId,itemId,weapon_1) end
    onHit(targetId,damage):
      lua: if register ~= nil then register:callAction("OnHit",targetId,damage,weapon_1) end
  weapon_2:
    onReload(ammoId):
      lua: if register ~= nil then register:callAction("OnReload",ammoId,weapon_2) end
    onReloaded(ammoId):
      lua: if register ~= nil then register:callAction("OnReloaded",ammoId,weapon_2) end
    onMissed(targetId):
      lua: if register ~= nil then register:callAction("OnMissed",targetId,weapon_2) end
    onDestroyed(targetId):
      lua: if register ~= nil then register:callAction("OnDestroyed",targetId,weapon_2) end
    onElementDestroyed(targetId,itemId):
      lua: if register ~= nil then register:callAction("OnElementDestroyed",targetId,itemId,weapon_2) end
    onHit(targetId,damage):
      lua: if register ~= nil then register:callAction("OnHit",targetId,damage,weapon_2) end
  weapon_3:
    onReload(ammoId):
      lua: if register ~= nil then register:callAction("OnReload",ammoId,weapon_3) end
    onReloaded(ammoId):
      lua: if register ~= nil then register:callAction("OnReloaded",ammoId,weapon_3) end
    onMissed(targetId):
      lua: if register ~= nil then register:callAction("OnMissed",targetId,weapon_3) end
    onDestroyed(targetId):
      lua: if register ~= nil then register:callAction("OnDestroyed",targetId,weapon_3) end
    onElementDestroyed(targetId,itemId):
      lua: if register ~= nil then register:callAction("OnElementDestroyed",targetId,itemId,weapon_3) end
    onHit(targetId,damage):
      lua: if register ~= nil then register:callAction("OnHit",targetId,damage,weapon_3) end
  weapon_4:
    onReload(ammoId):
      lua: if register ~= nil then register:callAction("OnReload",ammoId,weapon_4) end
    onReloaded(ammoId):
      lua: if register ~= nil then register:callAction("OnReloaded",ammoId,weapon_4) end
    onMissed(targetId):
      lua: if register ~= nil then register:callAction("OnMissed",targetId,weapon_4) end
    onDestroyed(targetId):
      lua: if register ~= nil then register:callAction("OnDestroyed",targetId,weapon_4) end
    onElementDestroyed(targetId,itemId):
      lua: if register ~= nil then register:callAction("OnElementDestroyed",targetId,itemId,weapon_4) end
    onHit(targetId,damage):
      lua: if register ~= nil then register:callAction("OnHit",targetId,damage,weapon_4) end
  weapon_5:
    onReload(ammoId):
      lua: if register ~= nil then register:callAction("OnReload",ammoId,weapon_5) end
    onReloaded(ammoId):
      lua: if register ~= nil then register:callAction("OnReloaded",ammoId,weapon_5) end
    onMissed(targetId):
      lua: if register ~= nil then register:callAction("OnMissed",targetId,weapon_5) end
    onDestroyed(targetId):
      lua: if register ~= nil then register:callAction("OnDestroyed",targetId,weapon_5) end
    onElementDestroyed(targetId,itemId):
      lua: if register ~= nil then register:callAction("OnElementDestroyed",targetId,itemId,weapon_5) end
    onHit(targetId,damage):
      lua: if register ~= nil then register:callAction("OnHit",targetId,damage,weapon_5) end
  weapon_6:
    onReload(ammoId):
      lua: if register ~= nil then register:callAction("OnReload",ammoId,weapon_6) end
    onReloaded(ammoId):
      lua: if register ~= nil then register:callAction("OnReloaded",ammoId,weapon_6) end
    onMissed(targetId):
      lua: if register ~= nil then register:callAction("OnMissed",targetId,weapon_6) end
    onDestroyed(targetId):
      lua: if register ~= nil then register:callAction("OnDestroyed",targetId,weapon_6) end
    onElementDestroyed(targetId,itemId):
      lua: if register ~= nil then register:callAction("OnElementDestroyed",targetId,itemId,weapon_6) end
    onHit(targetId,damage):
      lua: if register ~= nil then register:callAction("OnHit",targetId,damage,weapon_6) end
  weapon:
    onReload(ammoId):
      lua: if register ~= nil then register:callAction("OnReload",ammoId,weapon) end
    onReloaded(ammoId):
      lua: if register ~= nil then register:callAction("OnReloaded",ammoId,weapon) end
    onMissed(targetId):
      lua: if register ~= nil then register:callAction("OnMissed",targetId,weapon) end
    onDestroyed(targetId):
      lua: if register ~= nil then register:callAction("OnDestroyed",targetId,weapon) end
    onElementDestroyed(targetId,itemId):
      lua: if register ~= nil then register:callAction("OnElementDestroyed",targetId,itemId,weapon) end
    onHit(targetId,damage):
      lua: if register ~= nil then register:callAction("OnHit",targetId,damage,weapon) end
  radar_1:
    onEnter(id):
      lua: if register ~= nil then register:callAction("OnEnter",id,radar_1) end
    onLeave(id):
      lua: if register ~= nil then register:callAction("OnLeave",id,radar_1) end
    onIdentified(id):
      lua: if register ~= nil then register:callAction("OnIdentified",id,radar_1) end
  radar_2:
    onEnter(id):
      lua: if register ~= nil then register:callAction("OnEnter",id,radar_2) end
    onLeave(id):
      lua: if register ~= nil then register:callAction("OnLeave",id,radar_2) end
    onIdentified(id):
      lua: if register ~= nil then register:callAction("OnIdentified",id,radar_2) end
  radar_3:
    onEnter(id):
      lua: if register ~= nil then register:callAction("OnEnter",id,radar_3) end
    onLeave(id):
      lua: if register ~= nil then register:callAction("OnLeave",id,radar_3) end
    onIdentified(id):
      lua: if register ~= nil then register:callAction("OnIdentified",id,radar_3) end
  radar_4:
    onEnter(id):
      lua: if register ~= nil then register:callAction("OnEnter",id,radar_4) end
    onLeave(id):
      lua: if register ~= nil then register:callAction("OnLeave",id,radar_4) end
    onIdentified(id):
      lua: if register ~= nil then register:callAction("OnIdentified",id,radar_4) end
  radar_5:
    onEnter(id):
      lua: if register ~= nil then register:callAction("OnEnter",id,radar_5) end
    onLeave(id):
      lua: if register ~= nil then register:callAction("OnLeave",id,radar_5) end
    onIdentified(id):
      lua: if register ~= nil then register:callAction("OnIdentified",id,radar_5) end
  radar_6:
    onEnter(id):
      lua: if register ~= nil then register:callAction("OnEnter",id,radar_6) end
    onLeave(id):
      lua: if register ~= nil then register:callAction("OnLeave",id,radar_6) end
    onIdentified(id):
      lua: if register ~= nil then register:callAction("OnIdentified",id,radar_6) end
  radar:
    onEnter(id):
      lua: if register ~= nil then register:callAction("OnEnter",id,radar) end
    onLeave(id):
      lua: if register ~= nil then register:callAction("OnLeave",id,radar) end
    onIdentified(id):
      lua: if register ~= nil then register:callAction("OnIdentified",id,radar) end
  shieldGenerator:
    onToggled(active):
      lua: if register ~= nil then register:callAction("OnToggled",active,shieldGenerator) end
    onAbsorbed(hitpoints,rawHitpoints):
      lua: if register ~= nil then register:callAction("OnAbsorbed",hitpoints,rawHitpoints,shieldGenerator) end
    onVentin(active,restoredHitpoints):
      lua: if register ~= nil then register:callAction("OnVentin",active,restoredHitpoints,shieldGenerator) end
    onDown:
      lua: if register ~= nil then register:callAction("OnDown",shieldGenerator) end
    onRestored:
      lua: if register ~= nil then register:callAction("OnRestored",shieldGenerator) end
  core:
    onStressChanged(stress):
      lua: if register ~= nil then register:callAction("coreOnStressChanged",stress,core) end
