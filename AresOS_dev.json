{"slots":{"0":{"name":"slot1","type":{"methods":[],"events":[]}},"1":{"name":"slot2","type":{"methods":[],"events":[]}},"2":{"name":"slot3","type":{"methods":[],"events":[]}},"3":{"name":"slot4","type":{"methods":[],"events":[]}},"4":{"name":"slot5","type":{"methods":[],"events":[]}},"5":{"name":"slot6","type":{"methods":[],"events":[]}},"6":{"name":"slot7","type":{"methods":[],"events":[]}},"7":{"name":"slot8","type":{"methods":[],"events":[]}},"8":{"name":"slot9","type":{"methods":[],"events":[]}},"9":{"name":"slot10","type":{"methods":[],"events":[]}},"-1":{"name":"unit","type":{"methods":[],"events":[]},"_elementType":"control"},"-2":{"name":"system","type":{"methods":[],"events":[]},"_elementType":"system"},"-3":{"name":"library","type":{"methods":[],"events":[]},"_elementType":"library"},"-4":{"name":"player","type":{"methods":[],"events":[]},"_elementType":"player"},"-5":{"name":"construct","type":{"methods":[],"events":[]},"_elementType":"construct"}},"handlers":[{"key":"0","filter":{"slotKey":-1,"signature":"onStart()","args":[]},"code":"packagePrefix = \"autoconf.custom.AresOS.\"\nsystem.rawPrint = system.print\nfunction system.print(msg,err)\n    if err then\n        err = tostring(err):gsub('\"%-%- |STDERROR%-EVENTHANDLER[^\"]*\"', 'chunk'):gsub(\"&\", \"&amp;\"):gsub(\"<\", \"&lt;\"):gsub(\">\", \"&gt;\")\n    else\n        err = \"???\"\n    end\n    system.rawPrint(msg .. \" \".. err)\nend\nfunction print(str)\n    system.rawPrint(tostring(str))\nend\n--if unit.hasDRM() == 0 then\n--    print(\"DRM Required!!!!\")\n--    error(\"DRM Required!!!!\")\n--\tunit.stop()\n--end\nunit.hideWidgets()\nprint(\"Hyperion Gunner Script V0.9\")\nprint(\"by Skeletmaster and Proximo\")\nsystem.showScreen(1) ---Start Screen\nsystem.setScreen([[<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"40%\" style=\"left:30%;top:10%;display:block; position:absolute;\" viewBox=\"0 0 973.35 837.57\">\n    <defs>\n    <style>\n    .cls-1 { fill: #798a99; }\n    .cls-2 { fill: #bd1730; }\n    </style>\n    </defs>\n    <path class=\"cls-1\" d=\"M583,93.5H437.52C353.65,361.21,211.41,603.08,25.7,804.26L98.3,930a1892.42,1892.42,0,0,1,828.89-.22l70.63-122.29C810.63,605.68,667.33,362.63,583,93.5ZM508.29,740.05A945,945,0,0,0,206.5,789.18C357.22,655.35,464.94,474.16,506.32,269c41.16,204.15,148,384.54,297.51,518.13A945.66,945.66,0,0,0,508.29,740.05Z\" transform=\"translate(-25.08 -93)\"/>\n    <circle class=\"cls-2\" cx=\"481.42\" cy=\"523.5\" r=\"118\"/>\n    </svg>\n    <svg height=\"100%\" width=\"100%\" viewBox=\"0 0 1920 1080\" style=\"left:0%;top:0%;display:block; position:absolute;\">\n    <text x=\"40%\" y=\"88%\" style=\"fill:#FFFFFF;font-size:50px\">Hyperion Scripting</text>\n    </svg>]])\n\nlocal plugins = {}\nlocal pluginCache = {}\n-- optional key, will checked on function \"valid\" before returning plugin if it exist, otherwise defaults to return plugin\nfunction plugins:getPlugin(name,noError,key)\n    assert(type(name) == \"string\", \"getPlugin: parameter name has to be string, was \" .. type(name))\n    if noError == nil then noError = false end\n    if string.find(name, packagePrefix) then\n        name = string.gsub(name, packagePrefix, \"\")\n    end\n    if not plugins:hasPlugin(name,noError) then return nil end\n\n    if type(pluginCache[name]) == \"table\" and pluginCache[name].valid ~= nil then\n        if pluginCache[name]:valid(key) ~= true then\n            print(\"getPlugin '\"..name..\"':\"..\" Request denied, authorization key required!\")\n            return nil\n        end\n    end\n\n    return pluginCache[name]\nend\nfunction plugins:hasPlugin(name,noError)\n    assert(type(name) == \"string\", \"hasPlugin: parameter name has to be string, was \" .. type(name))\n    if noError == nil then noError = false end\n    if string.find(name, packagePrefix) then\n        name = string.gsub(name, packagePrefix, \"\")\n    end\n    if pluginCache[name] == nil then\n        local ok, res = pcall(require, packagePrefix..name)\n        if not ok then\n            pluginCache[name] = false\n            if noError == nil or not noError then\n                system.print(\"hasPlugin '\"..name..\"': require failed\",res)\n            end\n        else\n            pluginCache[name] = res\n        end\n\n        if type(pluginCache[name]) == \"table\" then\n            if pluginCache[name].register ~= nil then\n                if _ENV[\"debugscreen\"] == nil then _ENV[\"debugscreen\"] = debugscreen end\n                if _ENV[\"register\"] == nil then _ENV[\"register\"] = register end\n                if _ENV[\"system\"] == nil then _ENV[\"system\"] = system end\n                if _ENV[\"unit\"] == nil then _ENV[\"unit\"] = unit end\n\t\t\t\tif _ENV[\"player\"] == nil then _ENV[\"player\"] = player end\n                if _ENV[\"construct\"] == nil then _ENV[\"construct\"] = construct end\n                if _ENV[\"library\"] == nil then _ENV[\"library\"] = library end\n                local ok2, res2 = pcall(pluginCache[name].register,pluginCache[name],_ENV)\n                if not ok2 and not noError then\n                    system.print(\"hasPlugin '\"..name..\"': register failed\",res2)\n                end\n            end\n        else\n            if pluginCache[name] ~= nil and pluginCache[name] ~= false then\n\t\t\t\tif type(pluginCache[name]) == \"string\" then \n\t\t\t\t\tprint(\"hasPlugin '\"..name..\"':\"..pluginCache[name])\n\t\t\t\telse\n\t\t\t\t\tprint(\"hasPlugin '\"..name..\"': not table value\")\n\t\t\t\tend\n                \n            end\n        end\n    end\n    return type(pluginCache[name]) == \"table\"\nend\nfunction hasPlugin(name,noError) return plugins:hasPlugin(name,noError) end\nfunction getPlugin(name,noError,key) return plugins:getPlugin(name,noError,key) end\nlocal errorStack = {}\n\n-- NEEDS to be the FIRST initialized module! Register is the only implicit dependency\nunitType = \"gunner\"  --export: Set behaviour type of element\nrenderEveryXFrames = 1 --export: Reduces the framerate of the interface.<br>Higher values will save more performance\nexecuteTotal = 0\nexecuteSet = 0\nexecuteTime = 0\nexecuteLastFrames = 0\nscreenToggle = true\nmode = -1\nforceMode = -1\n\nbootTime = system.getArkTime()\n\nuseLightStyle = false --export: Light style reduces the interface to digital numbers and indicators\n\nlocal mode1Color = 120 --export: Base color of interface<br>Range: 0-360<br>Try 120, 184 or 334. Can be any other number in range.\nlocal mode2Color = 184 --export: Space color of interface<br>Range: 0-360<br>Try 120, 184 or 334. Can be any other number in range.\n\nmodeColors = {}\nmodeColors[0] = mode1Color\nmodeColors[1] = mode2Color\n\nfuelTankHandlingSpace = 5 --export:\nfuelTankHandlingRocket = 5 --export:\nContainerOptimization = 5 --export:\nFuelTankOptimization = 5 --export:\n\n--whispernet = getPlugin(\"whispernet\",true,{key=\"AiLykdV3zuK1sfSAFWJK9bHAAXgjllKp\",channel=\"WhisperNet_f9d1cd401c9805ed729c9a93f6efcd54\",broadcast=\"WhisperNet_Broadcast\",base=\"RtnFPqOSthYsiDtGL9kERn0G1ejCC2e4\"})\n\n\n--getPlugin(\"basefly\", false) --Early init basic flight script\n\n--local ok, finalStr = pcall(func)\n--if ok then\n--    print(\"is ok \"..ok)\n--else\n--    print(finalStr)\n--    print(\"not ok \"..ok)\n--end\n--print(string.dump(func().register))\n\n--package.preload[ \"autoconf.custom.testscript\" ] = func\n\n--local dictpress = loadPlugin(\"autoconf.custom.dictpress\")\n--local testval = dictpress:compress(\"testwert kompremieren, testwert kompremieren, testwert kompremieren,testwert kompremierentestwert kompremierentestwert kompremierentestwert kompremieren\")\n--print(testval)\n--print(dictpress:decompress(testval))\n\nfunction collect_keys(t, sort)\n    local _k = {}\n    for k in pairs(t) do\n        _k[#_k+1] = k\n    end\n    table.sort(_k, sort)\n    return _k\nend\nfunction sortedPairs(t, sort)\n    local keys = collect_keys(t, sort)\n    local i = 0\n    return function()\n        i = i+1\n        if keys[i] then\n            return keys[i], t[keys[i]]\n        end\n    end\nend\nfunction tableLength(T)\n    local count = 0\n    for _ in pairs(T) do count = count + 1 end\n    return count\nend\n-- END orderedPairs functions\n\nfunction timeit(title, f)\n    collectgarbage()\n    local startTime = system.getTime()\n    local result = f()\n    local endTime = system.getTime()\n    system.print( title .. \": \" .. (endTime - startTime) )\n    return result\nend\nfunction getRelativePitch(velocity)\n    return math.deg(math.atan(velocity[2], velocity[3])) - 90\nend\nfunction getRelativeYaw(velocity)\n    return math.deg(math.atan(velocity[2], velocity[1])) - 90\nend\nfunction mysplit(inputstr, sep)\n    if sep == nil then sep = \"%s\" end\n    local t={}\n    for str in string.gmatch(inputstr, \"([^\"..sep..\"]+)\") do\n        table.insert(t, str)\n    end\n    return t\nend\nfunction inTable(tab, val)\n    if type(tab) ~= \"table\" then return false end\n    for k,v in pairs(tab) do\n        if v == val then return true,k end\n    end\n    return false\nend\nfunction round(num, numDecimalPlaces)\n    local mult = 10 ^ (numDecimalPlaces or 0)\n    if numDecimalPlaces ~= nil then\n        return math.floor(num * mult + 0.5) / mult\n    else\n        return math.floor((num * mult + 0.5) / mult)\n    end\nend\nif not inTable(player.getOrgIds(),2041) then system.print(\"Not allowed. Corp signatur required.\") unit.exit() end\n\nregister = getPlugin(\"register\")\nslots = getPlugin(\"slots\")\n\n-- Simulate system start\nregister:callAction(\"systemStart\")\n\n--easier time with timers\nlocal Timer = {}\nfunction addTimer(ID, time, callback)\n    unit.setTimer(ID, time)\n    Timer[ID] = callback\nend\n\nfunction onTimer(timerId)\n    if Timer[timerId] ~= nil then\n        local a,b = pcall(Timer[timerId])\n        if not a then print(\"Timer:\" .. b .. \"  \" .. timerId) end\n    end\nend\n\nfunction stopTimer()\n    for k,_ in pairs(Timer) do\n        unit.setTimer(k,0)\n    end\nend\nlocal DelayCounter = 0\nfunction delay(func, time)\n    local ID = \"DelayCounter\".. DelayCounter\n    addTimer(ID, time, function() pcall(func) unit.stopTimer(ID) end)\n    DelayCounter = DelayCounter + 1\nend\nregister:addAction(\"unitOnTimer\", \"Timer\", onTimer) \n\n-- Load all registrations from all packages. Will be late init\n\ngetPlugin(\"dev\", true)\n\ndelay(function() register:callAction(\"unitOnStart\") end, 1)\n\n\n\n-- Load all registrations from all packages. Will be late init\n--for name,_ in sortedPairs(package.preload) do\n    --if name ~= \"artificialhorizon\" and name ~= \"hud\" and name ~= \"multiscreener\" then\n    --    getPlugin(name)\n    --end\n--end\n\n-- Hud general (late init as well, preferable last init)\n--getPlugin(\"artificialhorizon\", false)\n--getPlugin(\"hud\", false)\n\n-- Multiscreen-Manager for player hud\n--getPlugin(\"multiscreener\", false)"},{"key":"1","filter":{"slotKey":-1,"signature":"onStop()","args":[]},"code":"if register ~= nil then register:callAction(\"unitOnStop\",unit) end"},{"key":"2","filter":{"slotKey":-1,"signature":"onTimer(tag)","args":[{"variable":"*"}]},"code":"if register ~= nil then register:callAction(\"unitOnTimer\",tag,unit) end"},{"key":"3","filter":{"slotKey":-2,"signature":"onActionStart(action)","args":[{"variable":"*"}]},"code":"if register ~= nil then register:callAction(\"systemOnActionStart\",action,system) end"},{"key":"4","filter":{"slotKey":-2,"signature":"onActionStop(action)","args":[{"variable":"*"}]},"code":"if register ~= nil then register:callAction(\"systemOnActionStop\",action,system) end"},{"key":"5","filter":{"slotKey":-2,"signature":"onActionLoop(action)","args":[{"variable":"*"}]},"code":"if register ~= nil then register:callAction(\"systemOnActionLoop\",action,system) end"},{"key":"6","filter":{"slotKey":-2,"signature":"onUpdate()","args":[]},"code":"if register ~= nil then register:callAction(\"systemOnUpdate\",system) end"},{"key":"7","filter":{"slotKey":-2,"signature":"onFlush()","args":[]},"code":"if register ~= nil then register:callAction(\"systemOnFlush\",system) end"},{"key":"8","filter":{"slotKey":-2,"signature":"onInputText(text)","args":[{"variable":"*"}]},"code":"if register ~= nil then register:callAction(\"systemOnInputText\",text,system) end"},{"key":"9","filter":{"slotKey":-4,"signature":"onParentChanged(oldId,newId)","args":[{"variable":"*"},{"variable":"*"}]},"code":"if register ~= nil then register:callAction(\"playerOnParentChanged\",oldId,newId,player) end"},{"key":"10","filter":{"slotKey":-5,"signature":"onDocked(id)","args":[{"variable":"*"}]},"code":"if register ~= nil then register:callAction(\"constructOnDocked\",id,construct) end"},{"key":"11","filter":{"slotKey":-5,"signature":"onUndocked(id)","args":[{"variable":"*"}]},"code":"if register ~= nil then register:callAction(\"constructOnUndocked\",id,construct) end"},{"key":"12","filter":{"slotKey":-5,"signature":"onPlayerBoarded(id)","args":[{"variable":"*"}]},"code":"if register ~= nil then register:callAction(\"constructOnPlayerBoarded\",id,construct) end"},{"key":"13","filter":{"slotKey":-5,"signature":"onVRStationEntered(id)","args":[{"variable":"*"}]},"code":"if register ~= nil then register:callAction(\"constructOnVRStationEntered\",id,construct) end"},{"key":"14","filter":{"slotKey":-5,"signature":"onConstructDocked(id)","args":[{"variable":"*"}]},"code":"if register ~= nil then register:callAction(\"constructOnConstructDocked\",id,construct) end"},{"key":"15","filter":{"slotKey":-5,"signature":"onPvPTimer(active)","args":[{"variable":"*"}]},"code":"if register ~= nil then register:callAction(\"constructOnPvPTimer\",active,construct) end"}],"methods":[],"events":[]}